<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CF1679F 题解</title>
    <url>/2024/11/19/CF1679F-%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $m$ 组<strong>无序</strong>数对 $(u_i,v_i)$。<br>对于 $n$ 位十进制整数 $A$（可以有前导 $0$），若 $A$ 的相邻两位数 $(x,y)$ 存在于这 $m$ 个数对当中，则可以交换这两位。若 $A$ 可以通过若干次操作变成 $B$，则称 $A$ 和 $B$ 等价。</p>
<p>求出最大整数 $k$，使得存在一组非负整数 $x_1,x_2,\ldots,x_k(0\leq x_i&lt;10^n)$ 满足对于任意 $1\leq i&lt;j\leq k$，$x_i$ 与 $x_j$ 不等价。</p>
<p>$n \leq 50000$</p>
<p><strong>Difficulty: *2600</strong>   </p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>显然有若干个等价类，所以只需要对等价类计数就好。<br>每个等价类只取最小的数作为代表，所以就是要求出，有多少个 $n$ 位数，使得它<strong>不能通过操作变得更小</strong>。</p>
<p>设 $ok_{u,v}=\text{true}$ 表示输入中<strong>不存在</strong>无序对 $(u,v)$。<br>考虑什么时候可以在下一位填一个 $k$，就是，填上 $k$ 之后，往前一直能换就换，过程中不能碰到一个大于 $k$ 的。<br>所以当这一位填了 $x$ 之后：  </p>
<ul>
<li>所有 $ok_{x,k}=\text{true}$ 的 $k$ 都可以填在下一位（这里面包括 $x=k$），  </li>
<li>所有 $ok_{x,k}=\text{false} \ \wedge \ k&lt;x$ 的 $k$ 都不能填在下一位，  </li>
<li>所有 $ok_{x,k}=\text{false} \ \wedge \ k&gt;x$ 的 $k$，这一位能填的下一位也可以，这一位不能填的下一位也不行。  </li>
</ul>
<p>立即有 $f_{i,sta}$ 表示，现在填完了从高到低前 $i$ 位，下一位能填的数的集合为 $sta$，有多少种方案。枚举下一位填的数 $k$，即得 $sta’$，转移即可。<br>令 $w=10$，时间复杂度 $O(n\cdot 2^w \cdot w)$。  </p>
<h3 id="Code-Time！"><a href="#Code-Time！" class="headerlink" title="Code Time！"></a>Code Time！</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">int</span> inf=<span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">50005</span>,M=<span class="number">55</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> &amp;a,<span class="type">int</span> b)</span></span>&#123;a=(a+b)%mod;&#125;</span><br><span class="line"><span class="type">int</span> n,m,ans,ed=<span class="number">1023</span>;</span><br><span class="line"><span class="type">bool</span> ok[M][M];</span><br><span class="line"><span class="type">int</span> cur,f[<span class="number">2</span>][<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> rst[N],jia[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">10</span>;j++)</span><br><span class="line">            ok[i][j]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v;i&lt;=m;i++)cin&gt;&gt;u&gt;&gt;v,ok[v][u]=<span class="number">0</span>,ok[u][v]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        rst[i]=ed;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;i;j++)</span><br><span class="line">            <span class="keyword">if</span>(!ok[i][j])rst[i]^=(<span class="number">1</span>&lt;&lt;j);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">10</span>;j++)</span><br><span class="line">            <span class="keyword">if</span>(ok[i][j])jia[i]|=(<span class="number">1</span>&lt;&lt;j);</span><br><span class="line">    &#125;</span><br><span class="line">    cur=<span class="number">0</span>,f[cur][ed]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cur^=<span class="number">1</span>,<span class="built_in">memset</span>(f[cur],<span class="number">0</span>,<span class="built_in">sizeof</span>(f[cur]));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=ed;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!f[cur^<span class="number">1</span>][j])<span class="keyword">continue</span>;</span><br><span class="line">            f[cur^<span class="number">1</span>][j]%=mod;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;<span class="number">10</span>;k++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!((j&gt;&gt;k)&amp;<span class="number">1</span>))<span class="keyword">continue</span>;</span><br><span class="line">                <span class="type">int</span> jj=(j&amp;rst[k])|jia[k];</span><br><span class="line">                f[cur][jj]+=f[cur^<span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=ed;i++)<span class="built_in">add</span>(ans,f[cur][i]);</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// freopen(&quot;data.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;data.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="type">int</span> aqx=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(aqx--)<span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>计数</tag>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>P10218 省选联考2024D1T2 题解</title>
    <url>/2025/02/16/P10218-%E7%9C%81%E9%80%89%E8%81%94%E8%80%832024D1T2-%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $a_1,a_2,\dots,a_n$ 以及 $b_1,b_2,\dots,b_n$，满足 $a_i \in [0,2^k-1]$ 以及 $b_i\geq 0$，你需要给出 $S \subseteq \{1,2,\dots,n\}$ 以及 $x \in [0,2^k-1]$ 满足以下条件：</p>
<ul>
<li>$\sum \limits_{i\in S} b_i\leq m$；</li>
<li>满足以上条件的前提下，最大化 $val(S,x)=\min(\min \limits_{i \in S}(a_i+x),\min \limits_{i \in U \backslash S}(a_i \oplus x))$ 的值。</li>
</ul>
<p>你只需要给出最大的 $val(S,x)$ 的值即可。</p>
<p><strong>Difficulty: 黑</strong></p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>先判掉 $\sum b_i \le m$，此时全部选加法。否则，答案不会超过 $k$ 位。</p>
<p>在由 $a$ 建的 trie 上<strong>按位贪心</strong>，从高到低确定<strong>答案</strong>的每一位是否可以是 $1$。</p>
<p>设现在要确定答案的第 $t$ 位，已知更高位的答案为 $w$，当前的 $x$，$S$ 内最小的 $a_i$ 为 $y$，$m$ 还剩多少，在 trie 上走到了节点 $p$（表示 $p$ 子树外的 $a_i$ 要么被分进了 $S$，要么已经不会限制答案，即某一位上答案是 $0$，但 $a_i \oplus x$ 是 $1$；而从根到 $p$ 的路径异或 $x$ 恰好是 $w$）。<br>下面称“高位”为大于 $t$ 的位，即已经被确定的位；“低位”为小于等于 $t$ 的位，即还没有被确定的位。<br>我们要求，总存在一种方案，使得 $w$ 的高位能被满足。当只考虑异或的时候，无论 $x$ 的低位取多少，都不会影响 $w$ 的高位。但是，由于 $y$ 加上 $x$ 的高位可能还不到 $w$，所以需要有 $y+x+(2^{t+1}-1) \ge w$，即 $x$ 取最大值时，加法也能满足。</p>
<p>接下来是贪心策略。<br>记 $s_p$ 表示 $p$ 子树内 $b_i$ 之和，$g_p$ 表示 $p$ 子树内最小的 $a_i$，$ls$ 表示 $p$ 的 $0$ 子树（左子树），$rs$ 表示 $p$ 的 $1$ 子树（右子树）。规定空子树 $s=0, g=+\infty$。</p>
<ul>
<li>当 $t=-1$ 时，所有的位都已经确定，令 $ans \leftarrow \max(ans,w)$。  </li>
<li>当 $p$ 为空节点时，仅有加法对 $w$ 有限制，令 $ans \leftarrow \max(ans,y+x+(2^{t+1}-1))$。</li>
</ul>
<p>显然上面这两种不矛盾。</p>
<p>剩下的就要确定 $w$ 和 $x$ 的这一位。</p>
<ul>
<li>假设 $w$ 的这一位可以是 $1$：<ul>
<li>若 $x$ 这一位填 $0$，则右子树暂时合法，而左子树需要全部加入 $S$，故须有 $s_{ls} \le m \enspace \wedge \enspace \min(y,g_{ls})+x+(2^t-1) \ge (w+2^t)$，若此，则递归右子树。</li>
<li>若 $x$ 这一位填 $1$，则左子树暂时合法，而右子树需要全部加入 $S$，故须有 $s_{rs} \le m \enspace \wedge \enspace \min(y,g_{rs})+(x+2^t)+(2^t-1) \ge (w+2^t)$，若此，则递归左子树。</li>
</ul>
</li>
<li>若上述条件均不满足，则 $w$ 这一位只能是 $0$：<ul>
<li>若 $x$ 这一位填 $0$，须有 $y+x+(2^t-1) \ge w$，则右子树不再有限制，递归左子树。</li>
<li>若 $x$ 这一位填 $1$，注意到一定合法，则左子树不再有限制，递归右子树，</li>
</ul>
</li>
</ul>
<p>发现只要每一步满足条件，则一定存在一种方案。<br>由于 trie 上每个点至多被访问一次，故时间复杂度 $O(nk)$。</p>
<h3 id="Code-Time"><a href="#Code-Time" class="headerlink" title="Code Time!"></a>Code Time!</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Int __int128</span></span><br><span class="line"><span class="type">int</span> aqx=<span class="number">1</span>,byx=<span class="number">1</span>,inf=<span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">Int Inf=(Int)inf*inf;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(Int &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">getchar</span>();x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=(x*<span class="number">10</span>+(ch-<span class="string">&#x27;0&#x27;</span>)),ch=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write</span><span class="params">(Int x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">10</span>)&#123;<span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span>+x);<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="built_in">write</span>(x/<span class="number">10</span>),<span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span>+x%<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+5</span>;</span><br><span class="line"><span class="type">int</span> n,m,k,b[N];</span><br><span class="line">Int a[N],ans;</span><br><span class="line"><span class="type">int</span> tot,s[N*<span class="number">120</span>][<span class="number">2</span>],sum[N*<span class="number">120</span>];</span><br><span class="line">Int mn[N*<span class="number">120</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> t,Int w,Int x,Int y,<span class="type">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t==<span class="number">-1</span>)&#123;ans=<span class="built_in">max</span>(ans,w);<span class="keyword">return</span>;&#125;</span><br><span class="line">    Int C=(Int)<span class="number">1</span>&lt;&lt;t;</span><br><span class="line">    <span class="keyword">if</span>(!p&amp;&amp;t&lt;k<span class="number">-1</span>)&#123;ans=<span class="built_in">max</span>(ans,y+(x|C|(C<span class="number">-1</span>)));<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="type">bool</span> f0=<span class="number">0</span>,f1=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>((w|C)-<span class="built_in">min</span>(y,mn[s[p][<span class="number">0</span>]])-x&lt;C&amp;&amp;sum[s[p][<span class="number">0</span>]]&lt;=m)f0=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(w-<span class="built_in">min</span>(y,mn[s[p][<span class="number">1</span>]])-x&lt;C&amp;&amp;sum[s[p][<span class="number">1</span>]]&lt;=m)f1=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(f0||f1)&#123;</span><br><span class="line">        <span class="keyword">if</span>(f0)<span class="built_in">dfs</span>(s[p][<span class="number">1</span>],t<span class="number">-1</span>,w|C,x,<span class="built_in">min</span>(y,mn[s[p][<span class="number">0</span>]]),m-sum[s[p][<span class="number">0</span>]]);</span><br><span class="line">        <span class="keyword">if</span>(f1)<span class="built_in">dfs</span>(s[p][<span class="number">0</span>],t<span class="number">-1</span>,w|C,x|C,<span class="built_in">min</span>(y,mn[s[p][<span class="number">1</span>]]),m-sum[s[p][<span class="number">1</span>]]);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(w-y-x&lt;C)<span class="built_in">dfs</span>(s[p][<span class="number">0</span>],t<span class="number">-1</span>,w,x,y,m);</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">true</span>)<span class="built_in">dfs</span>(s[p][<span class="number">1</span>],t<span class="number">-1</span>,w,x|C,y,m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">read</span>(a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;b[i]);</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)sum+=b[i];</span><br><span class="line">        <span class="keyword">if</span>(sum&lt;=m)&#123;</span><br><span class="line">            ans=Inf;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)ans=<span class="built_in">min</span>(ans,a[i]);</span><br><span class="line">            ans+=((Int)<span class="number">1</span>&lt;&lt;k)<span class="number">-1</span>;</span><br><span class="line">            <span class="built_in">write</span>(ans),<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    tot=<span class="number">0</span>,s[<span class="number">0</span>][<span class="number">0</span>]=s[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">0</span>,sum[<span class="number">0</span>]=<span class="number">0</span>,mn[<span class="number">0</span>]=(Int)<span class="number">1</span>&lt;&lt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> p=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=k<span class="number">-1</span>;~j;j--)&#123;</span><br><span class="line">            <span class="type">int</span> c=(a[i]&gt;&gt;j)&amp;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(!s[p][c])s[p][c]=++tot,s[tot][<span class="number">0</span>]=s[tot][<span class="number">1</span>]=<span class="number">0</span>,sum[s[p][c]]=<span class="number">0</span>,mn[s[p][c]]=(Int)<span class="number">1</span>&lt;&lt;k;</span><br><span class="line">            p=s[p][c],sum[p]+=b[i],mn[p]=<span class="built_in">min</span>(mn[p],a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>,k<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,(Int)<span class="number">1</span>&lt;&lt;k,m);</span><br><span class="line">    <span class="built_in">write</span>(ans),<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// ios::sync_with_stdio(0),cin.tie(0);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;data.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;data.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;aqx,&amp;aqx);byx&lt;=aqx;byx++)<span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>贪心</tag>
        <tag>二进制</tag>
      </tags>
  </entry>
  <entry>
    <title>Password tester(123456)</title>
    <url>/2024/11/03/Password-tester/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="ecd3cd297b4b8c955353f80717691ab0653cf1776ca474cdadf10ad8e665c6da">4630436162ade97ba2718b7d0c4b3b633edd16a8c78b7d4a375abf0237cd065b1fdd7fe03f8f5b88b0b2ae7e4e8ad067</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Hexo</category>
        <category>Test</category>
      </categories>
  </entry>
  <entry>
    <title>ARC083F 题解</title>
    <url>/2024/11/02/ARC083F-%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>$n\times n$ 的正方形上有 $2n$ 个小球，第 $i$ 个在 $(x_i,y_i)$，坐标互不相同。<br>有 $n$ 个 A 类机器人，第 $i$ 个在 $(0,i)$，有 $n$ 个 B 类机器人，第 $i$ 个在 $(i,0)$。<br>启动一个 A 类机器人后，它会向右走，将碰到的第一个球收集起来，并返回起点。启动一个 B 类机器人后，它会向上走，将碰到的第一个球收集起来，并返回起点。<br>只有上一个机器人返回起点后，下一个机器人才会被启动。机器人一旦被使用过一次就不能被再次使用。  </p>
<p>问你有多少种启动机器人的顺序，能够收集完所有小球。方案数对 $10^9+7$ 取模 。</p>
<p>$n\leq 10^5$</p>
<p><strong>Difficulty: *3500</strong></p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>我们把 $(1,0)\dots (n,0)$ 编号为 $1,2,\dots ,n$，把 $(0,1)\dots (0,n)$ 编号为 $n+1,n+2,\dots ,n+n$，然后对于一个球 $(x,y)$，在 $x$ 和 $y+n$ 之间连一条无向边。于是机器人对应点，小球对应边，操作一个机器人，相当于<strong>删掉一个点和相连的一条边</strong>（和这个点相连的其他边仍然保留）。又因为机器人和小球数量相等，所以<strong>每个机器人都必须收集一个小球</strong>，故点和边之间是完美匹配。</p>
<p>于是我们有了一张 $|V|=|E|=2n$ 的无向图，所以这是一个基环树森林……不对！基环树森林还要求每个点都有边。不过，在这个题中，一个点没有边，意味着这个机器人不能收集小球，<strong>这种情况一定无解</strong>，直接输出 <code>0</code> 就好了。</p>
<p>所以这就是<strong>基环树森林</strong>。</p>
<p>考虑删边具体是如何进行的，我们发现，操作 $u$ 时，收集的是另一维坐标最小的小球，也就是删除<strong>另一个端点编号最小的边</strong>（_此后我们在考虑某个点的所有边时，直接把另一个端点的编号作为边的编号_）（此时另一个端点可能已经被删除，但我们仍然考虑它）。然鹅这条边不一定是我们希望删的边<del>要不然这题咋能黑</del>。显然，我们必须时刻保证，每个连通块的点数等于边数（包括那些其中一个端点已经被删除的边），要不然就会有点和边失配。在基环树上考虑，<strong>对于环上的点，我们希望删掉环上的边；否则我们希望删掉到父亲的边</strong>。我们称这条边为“对应边”，它的另一个端点为“对应点”。</p>
<p>因此我们在操作一个点 $u$ 时，在与 $u$ 相连的边中，<strong>比 $u$ 的对应边编号小的边必须已经删掉</strong>，而删掉这条边依赖于操作另一个端点 $v$，于是我们称 $u$ 依赖 $v$。<strong>新建一张有向图</strong>，如果 $u$ 依赖 $v$，就连一条有向边 $v\rightarrow u$。显然，<strong>这幅有向图上的所有拓扑序，就是符合题意的所有拓扑序。</strong></p>
<p>但你细想就会发现，这张有向图根本就建不出来——因为我们根本不知道环上的点的对应边是哪条！本蒟蒻在这卡了好久，去看了题解，才发现自己唐完了。<strong>同一个环上的点的对应边，要么全是逆时针方向的，要么全是顺时针方向的</strong>！我们设这个基环树森林共有 $m$ 棵基环树，$f_i$ 表示第 $i$ 棵基环树内部的拓扑序数量，$s_i$ 表示第 $i$ 棵基环树的点数，那我们只需要对每棵基环树，<strong>把顺时针和逆时针两种情况都算进 $f_i$</strong>，合并即得答案为 $(\prod\limits_{i=1}^{m}f_i)\cdot\dbinom{2n}{s_1,s_2,\dots,s_m}$。</p>
<p>那么，对于一棵基环树，我们在指定环的方向，并建出新的有向图后，该怎么求出拓扑序数量呢？这幅有向图满足以下性质：</p>
<ol>
<li>这幅图上的边，要么是基环树上儿子到父亲的边，要么是环上对应方向的边。因此每个点至多有一条出边。</li>
<li>这是一幅 DAG。因为原来的环上存在一个编号最小的点 $x$，以及一个对应点为 $x$ 的点 $y$，$y$ 一定不依赖环上的其他点，所以原图中的唯一一个环会被断开。</li>
</ol>
<p>于是<strong>新图是内向树（不是内向基环树）森林</strong>。那这就可以 dp 了啊。设 $g_u$ 为 $u$ 子树内的答案，$v$ 是 $u$ 的儿子 $sz_u$ 为 $u$ 的子树大小，则 $g_u=(\prod\limits_{v}g_v)\cdot\dbinom{sz_u-1}{\{sz_v\}}$。整个森林也是如是合并。</p>
<p>于是就做完了——建个图，找环，对于每个环，枚举顺时针和逆时针，建个新图，dp 一下，合并一下，最后再合并一下。</p>
<p><em>有没有觉得有点麻烦呢？写法可以优化！</em></p>
<p>首先，没有必要建新图，因为新图上的边都是原图上的边。先把树上的处理一下，保存必要信息，这样枚举顺逆时针的时候就只需要考虑环就好了。</p>
<p>此外，有没有发现，上面的式子大同小异呢？事实上，对所有环定向后的某个新图中，拓扑序的数量为 $\dfrac{(2n)!}{\prod\limits_{u}sz_u}$，归纳即证（感谢 @<a href="https://www.luogu.com.cn/user/22112">Mirach</a> 巨佬的题解对我的启发）。于是我们只需要对每棵基环树求出，顺逆时针两种情况的 $\prod\limits_{u}\dfrac{1}{sz_u}$ 之和，再把所有的乘起来（这个拆掉括号就是 $2^m$ 种定向方案之和），最后乘以 $(2n)!$ 即可。</p>
<p>线性预处理一下逆元就可以做到 $O(n)$！</p>
<h3 id="Code-Time！"><a href="#Code-Time！" class="headerlink" title="Code Time！"></a>Code Time！</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">int</span> inf=<span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">1e9</span><span class="number">+7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span><span class="number">+5</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> &amp;a,<span class="type">int</span> b)</span></span>&#123;a=(a+b)%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">mul</span><span class="params">(<span class="type">int</span> &amp;a,<span class="type">int</span> b)</span></span>&#123;a=a*b%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a%mod)</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)ret=ret*a%mod;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">inv</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">ksm</span>(x,mod<span class="number">-2</span>);&#125;</span><br><span class="line"><span class="type">int</span> jc[N],jcinv[N],iiv[N];</span><br><span class="line"><span class="type">int</span> n,ans;</span><br><span class="line">basic_string&lt;<span class="type">int</span>&gt;g[N];</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="type">bool</span> on[N];</span><br><span class="line"><span class="type">int</span> in[N];</span><br><span class="line"><span class="type">int</span> tot,c[N];</span><br><span class="line">basic_string&lt;<span class="type">int</span>&gt;h[N];</span><br><span class="line"><span class="type">int</span> sz[N];</span><br><span class="line"><span class="type">int</span> x[N],y[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">    vis[u]=<span class="number">1</span>,in[u]=tot;</span><br><span class="line">    <span class="type">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> v:g[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==fa)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(on[v])<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(vis[v])ret=v;</span><br><span class="line">        <span class="keyword">else</span> ret|=<span class="built_in">dfs1</span>(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ret)h[tot].<span class="built_in">push_back</span>(u),on[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(ret==u)ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">    sz[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> v:g[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==fa||on[v])<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs2</span>(v,u);</span><br><span class="line">        <span class="keyword">if</span>(v&lt;fa)sz[u]+=sz[v]; <span class="comment">// 假装这里有一条新图上的边</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">work1</span><span class="params">(<span class="type">int</span> i)</span></span>&#123; <span class="comment">// 只需处理环</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;c[i];j++)&#123;</span><br><span class="line">        <span class="type">int</span> u=h[i][j];</span><br><span class="line">        sz[u]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> v:g[u])</span><br><span class="line">            <span class="keyword">if</span>(!on[v]&amp;&amp;v&lt;h[i][j<span class="number">+1</span>])</span><br><span class="line">                sz[u]+=sz[v]; <span class="comment">// 假装这里有一条新图上的边</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 找到在哪里断环</span></span><br><span class="line">    <span class="type">int</span> mn=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;c[i];j++)<span class="keyword">if</span>(h[i][j]&lt;h[i][mn])mn=j;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=mn;j&lt;c[i];j++)&#123;</span><br><span class="line">        <span class="type">int</span> u=h[i][j],v=(!j?h[i][c[i]<span class="number">-1</span>]:h[i][j<span class="number">-1</span>]);</span><br><span class="line">        <span class="keyword">if</span>(v&lt;h[i][j<span class="number">+1</span>])sz[u]+=sz[v]; <span class="comment">// 假装这里有一条新图上的边</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;mn;j++)&#123;</span><br><span class="line">        <span class="type">int</span> u=h[i][j],v=(!j?h[i][c[i]<span class="number">-1</span>]:h[i][j<span class="number">-1</span>]);</span><br><span class="line">        <span class="keyword">if</span>(v&lt;h[i][j<span class="number">+1</span>])sz[u]+=sz[v]; <span class="comment">// 假装这里有一条新图上的边</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把环上的信息和子树信息合并</span></span><br><span class="line">    <span class="type">int</span> xx=x[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;c[i];j++)<span class="built_in">mul</span>(xx,iiv[sz[h[i][j]]]);</span><br><span class="line">    <span class="built_in">add</span>(y[i],xx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,x,y;i&lt;=n*<span class="number">2</span>;i++)cin&gt;&gt;x&gt;&gt;y,g[x].<span class="built_in">push_back</span>(y+n),g[y+n].<span class="built_in">push_back</span>(x);</span><br><span class="line">    n*=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(!g[i].<span class="built_in">size</span>())&#123;cout&lt;&lt;<span class="string">&quot;0\n&quot;</span>;<span class="keyword">return</span>;&#125; <span class="comment">// 不是基环树森林，无解</span></span><br><span class="line">    jc[<span class="number">0</span>]=<span class="number">1</span>;<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)jc[i]=jc[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">    jcinv[n]=<span class="built_in">inv</span>(jc[n]);<span class="keyword">for</span>(<span class="type">int</span> i=n;i;i--)jcinv[i<span class="number">-1</span>]=jcinv[i]*i%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)iiv[i]=jcinv[i]*jc[i<span class="number">-1</span>]%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">if</span>(!vis[i])tot++,<span class="built_in">dfs1</span>(i,<span class="number">0</span>),c[tot]=h[tot].<span class="built_in">size</span>(),h[tot].<span class="built_in">push_back</span>(h[tot][<span class="number">0</span>]); <span class="comment">// 找环</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">if</span>(on[i])<span class="built_in">dfs2</span>(i,<span class="number">0</span>); <span class="comment">// 处理子树信息</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)x[i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">if</span>(!on[i])<span class="built_in">mul</span>(x[in[i]],iiv[sz[i]]); <span class="comment">// 统计子树信息</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)&#123;</span><br><span class="line">        <span class="built_in">work1</span>(i); <span class="comment">// 顺时针</span></span><br><span class="line">        <span class="built_in">reverse</span>(h[i].<span class="built_in">begin</span>(),h[i].<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">work1</span>(i); <span class="comment">// 逆时针</span></span><br><span class="line">    &#125;</span><br><span class="line">    ans=jc[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)<span class="built_in">mul</span>(ans,y[i]);</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// freopen(&quot;data.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;data.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="type">int</span> aqx=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(aqx--)<span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>计数</tag>
        <tag>组合数学</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/11/01/hello-world/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Hello world!\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p><strong>Run commands at E:\\github\\blog.</strong></p>
<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br><span class="line"><span class="comment"># n -&gt; new</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line"><span class="comment"># s -&gt; server</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line"><span class="comment"># g -&gt; generate</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br><span class="line"><span class="comment"># d -&gt; deploy</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<h3 id="Quick-preview"><a href="#Quick-preview" class="headerlink" title="Quick preview"></a>Quick preview</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sh preview.sh</span><br></pre></td></tr></table></figure>
<h3 id="Quick-deploy"><a href="#Quick-deploy" class="headerlink" title="Quick deploy"></a>Quick deploy</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sh deploy.sh</span><br></pre></td></tr></table></figure>
<h2 id="Post-settings"><a href="#Post-settings" class="headerlink" title="Post settings"></a>Post settings</h2><h3 id="Where-are-they"><a href="#Where-are-they" class="headerlink" title="Where are they?"></a>Where are they?</h3><p>E:\\github\\blog\\source\\_posts</p>
<h3 id="Add-to-categories"><a href="#Add-to-categories" class="headerlink" title="Add to categories"></a>Add to categories</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">categories: xxx</span><br></pre></td></tr></table></figure>
<h3 id="Add-tags"><a href="#Add-tags" class="headerlink" title="Add tags"></a>Add tags</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tags:</span><br><span class="line">  - tag1</span><br><span class="line">  - tag2</span><br></pre></td></tr></table></figure>
<h3 id="Pin-to-top"><a href="#Pin-to-top" class="headerlink" title="Pin to top"></a>Pin to top</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># add to front-matter</span><br><span class="line">top: true  #add &quot;置顶&quot;</span><br><span class="line">sticky: x (1~100) #add an icon; set priority</span><br><span class="line"># These are different plugins.</span><br></pre></td></tr></table></figure>
<h3 id="Hide-article"><a href="#Hide-article" class="headerlink" title="Hide article"></a>Hide article</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># add to front-matter</span><br><span class="line">hide: true</span><br><span class="line"># This will hide a post from home page</span><br></pre></td></tr></table></figure>
<h3 id="Encrypt-article"><a href="#Encrypt-article" class="headerlink" title="Encrypt article"></a>Encrypt article</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># add to front-matter</span><br><span class="line">password: 123456</span><br></pre></td></tr></table></figure>
<h3 id="Insert-image"><a href="#Insert-image" class="headerlink" title="Insert image"></a>Insert image</h3><p>A folder with the same name will be created when <code>hexo n &quot;&quot;</code>. Put images in this folder and then use <code>![](xxx\xxx.png)</code>.<br>Note that images won’t be loaded properly on home page.</p>
]]></content>
      <categories>
        <category>Hexo</category>
        <category>Guideline</category>
      </categories>
  </entry>
  <entry>
    <title>Image-tester</title>
    <url>/2024/11/04/Image-tester/</url>
    <content><![CDATA[<p><img src="background.png" alt=""></p>
]]></content>
      <categories>
        <category>Hexo</category>
        <category>Test</category>
      </categories>
  </entry>
  <entry>
    <title>多项式板子</title>
    <url>/2025/01/12/%E5%A4%9A%E9%A1%B9%E5%BC%8FPoly%E6%9D%BF%E5%AD%90/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">int</span> aqx=<span class="number">1</span>,byx=<span class="number">1</span>,inf=<span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">998244353</span>,G=<span class="number">3</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span><span class="number">+5</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> &amp;a,<span class="type">int</span> b)</span></span>&#123;a=(a+b)%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">mul</span><span class="params">(<span class="type">int</span> &amp;a,<span class="type">int</span> b)</span></span>&#123;a=(a*b)%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a%mod)</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)ret=ret*a%mod;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">inv</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">ksm</span>(x,mod<span class="number">-2</span>);&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Poly</span>&#123;<span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> w;vector&lt;<span class="type">int</span>&gt;a;</span><br><span class="line">    <span class="built_in">Poly</span>()&#123;w=<span class="number">0</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;w=<span class="number">0</span>,a.<span class="built_in">clear</span>();&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">expand</span><span class="params">(<span class="type">int</span> len)</span></span>&#123;<span class="keyword">while</span>(w&lt;len)w++,a.<span class="built_in">emplace_back</span>(<span class="number">0</span>);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">simplify</span><span class="params">(<span class="type">int</span> len)</span></span>&#123;<span class="keyword">while</span>(w&gt;len)w--,a.<span class="built_in">pop_back</span>();&#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="type">void</span> _simplify(<span class="type">int</span> n)&#123;<span class="built_in">simplify</span>(n<span class="number">+1</span>);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">simplify</span><span class="params">()</span></span>&#123;<span class="keyword">while</span>(w&amp;&amp;!a.<span class="built_in">back</span>())a.<span class="built_in">pop_back</span>();&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="built_in">clear</span>(),w=n<span class="number">+1</span>,a.<span class="built_in">resize</span>(w);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;w;i++)cin&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">friend</span> <span class="type">void</span> <span class="title">read</span><span class="params">(Poly &amp;x,<span class="type">int</span> n)</span></span>&#123;x.<span class="built_in">read</span>(n);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">char</span> ch1=<span class="string">&#x27; &#x27;</span>,<span class="type">const</span> <span class="type">char</span> ch2=<span class="string">&#x27;\n&#x27;</span>)</span><span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;w;i++)&#123;</span><br><span class="line">            cout&lt;&lt;a[i];</span><br><span class="line">            <span class="keyword">if</span>(i&lt;w<span class="number">-1</span>)cout&lt;&lt;ch1;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;ch2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">friend</span> <span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> Poly &amp;x,<span class="type">const</span> <span class="type">char</span> ch1=<span class="string">&#x27; &#x27;</span>,<span class="type">const</span> <span class="type">char</span> ch2=<span class="string">&#x27;\n&#x27;</span>)</span></span>&#123;x.<span class="built_in">print</span>(ch1,ch2);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">degree</span><span class="params">()</span><span class="type">const</span></span>&#123;<span class="keyword">return</span> w<span class="number">-1</span>;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">friend</span> Poly _plus(<span class="type">const</span> Poly &amp;x,<span class="type">const</span> Poly &amp;y)&#123;</span><br><span class="line">        Poly z;</span><br><span class="line">        z.<span class="built_in">expand</span>(<span class="built_in">max</span>(x.w,y.w));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;z.w;i++)z.a[i]=((i&lt;x.w?x.a[i]:<span class="number">0</span>)+(i&lt;y.w?y.a[i]:<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span> z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">friend</span> Poly _minus(<span class="type">const</span> Poly &amp;x,<span class="type">const</span> Poly &amp;y)&#123;</span><br><span class="line">        Poly z;</span><br><span class="line">        z.<span class="built_in">expand</span>(<span class="built_in">max</span>(x.w,y.w));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;z.w;i++)z.a[i]=((i&lt;x.w?x.a[i]:<span class="number">0</span>)-(i&lt;y.w?y.a[i]:<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span> z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">NTT</span><span class="params">(<span class="type">int</span> len,<span class="type">int</span> g)</span></span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;<span class="built_in">rev</span>(len);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)rev[i]=((rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)*(len&gt;&gt;<span class="number">1</span>)));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)<span class="keyword">if</span>(i&lt;rev[i])<span class="built_in">swap</span>(a[i],a[rev[i]]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;len;i&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="type">int</span> wn=<span class="built_in">ksm</span>(g,(mod<span class="number">-1</span>)/(i&lt;&lt;<span class="number">1</span>));</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;len;j+=(i&lt;&lt;<span class="number">1</span>))</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>,wk=<span class="number">1</span>;k&lt;i;k++,wk=wk*wn%mod)&#123;</span><br><span class="line">                    <span class="type">int</span> x=a[j+k],y=wk*a[j+k+i]%mod;</span><br><span class="line">                    a[j+k]=(x+y)%mod,a[j+k+i]=(x-y)%mod;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)<span class="built_in">add</span>(a[i],mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">friend</span> Poly _multiply(<span class="type">const</span> Poly &amp;x,<span class="type">const</span> Poly &amp;y)&#123;</span><br><span class="line">        <span class="type">int</span> len=<span class="number">1</span>;<span class="keyword">while</span>(len&lt;x.w+y.w<span class="number">-1</span>)len&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        Poly xx=x,yy=y;xx.<span class="built_in">expand</span>(len),yy.<span class="built_in">expand</span>(len);</span><br><span class="line">        xx.<span class="built_in">NTT</span>(len,G),yy.<span class="built_in">NTT</span>(len,G);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)<span class="built_in">mul</span>(xx.a[i],yy.a[i]);</span><br><span class="line">        xx.<span class="built_in">NTT</span>(len,<span class="built_in">inv</span>(G));</span><br><span class="line">        <span class="type">int</span> ivlen=<span class="built_in">inv</span>(len);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)<span class="built_in">mul</span>(xx.a[i],ivlen);</span><br><span class="line">        xx.<span class="built_in">simplify</span>(x.w+y.w<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> xx;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">friend</span> Poly _square(<span class="type">const</span> Poly &amp;x)&#123;</span><br><span class="line">        <span class="type">int</span> len=<span class="number">1</span>;<span class="keyword">while</span>(len&lt;x.w+x.w<span class="number">-1</span>)len&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        Poly xx=x;xx.<span class="built_in">expand</span>(len);</span><br><span class="line">        xx.<span class="built_in">NTT</span>(len,G);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)<span class="built_in">mul</span>(xx.a[i],xx.a[i]);</span><br><span class="line">        xx.<span class="built_in">NTT</span>(len,<span class="built_in">inv</span>(G));</span><br><span class="line">        <span class="type">int</span> ivlen=<span class="built_in">inv</span>(len);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)<span class="built_in">mul</span>(xx.a[i],ivlen);</span><br><span class="line">        xx.<span class="built_in">simplify</span>(x.w+x.w<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> xx;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">friend</span> Poly <span class="keyword">operator</span>+(<span class="type">const</span> Poly &amp;x,<span class="type">const</span> Poly &amp;y)&#123;<span class="keyword">return</span> _plus(x,y);&#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">friend</span> Poly <span class="keyword">operator</span>-(<span class="type">const</span> Poly &amp;x,<span class="type">const</span> Poly &amp;y)&#123;<span class="keyword">return</span> _minus(x,y);&#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">friend</span> Poly <span class="keyword">operator</span>*(<span class="type">const</span> Poly &amp;x,<span class="type">const</span> Poly &amp;y)&#123;<span class="keyword">return</span> _multiply(x,y);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">friend</span> Poly <span class="title">ksm</span><span class="params">(<span class="type">const</span> Poly &amp;x,<span class="type">const</span> <span class="type">int</span> &amp;y)</span></span>&#123;</span><br><span class="line">        Poly z;z.w=<span class="number">1</span>,z.a.<span class="built_in">emplace_back</span>(<span class="number">1</span>);</span><br><span class="line">        Poly xx=x;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> t=y;t;t&gt;&gt;=<span class="number">1</span>,xx=_square(xx))</span><br><span class="line">            <span class="keyword">if</span>(t&amp;<span class="number">1</span>)z=z*xx;</span><br><span class="line">        <span class="keyword">return</span> z;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">Poly x,y,z;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    x.<span class="built_in">read</span>(n),y.<span class="built_in">read</span>(m);</span><br><span class="line">    z=x*y;</span><br><span class="line">    z.<span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// freopen(&quot;data.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;data.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="keyword">for</span>(;byx&lt;=aqx;byx++)<span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>模板</category>
      </categories>
      <tags>
        <tag>模板</tag>
        <tag>多项式</tag>
      </tags>
  </entry>
  <entry>
    <title>后缀自动机SAM板子</title>
    <url>/2025/01/13/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BASAM%E6%9D%BF%E5%AD%90/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">int</span> aqx=<span class="number">1</span>,byx=<span class="number">1</span>,inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span><span class="number">+5</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SAM</span>&#123;<span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> tot,lst;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">nod</span>&#123;</span><br><span class="line">        <span class="type">int</span> ch[<span class="number">26</span>],fail,len;</span><br><span class="line">    &#125;t[N*<span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> sz[N*<span class="number">2</span>]; <span class="comment">// sz[u]=1表示u在主链上；求fail树子树和则为u的出现次数</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;g[N];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">extend</span><span class="params">(<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> p=lst,np=lst=++tot;</span><br><span class="line">        sz[np]=<span class="number">1</span>,t[np].len=t[p].len<span class="number">+1</span>;</span><br><span class="line">        <span class="keyword">for</span>(;p&amp;&amp;!t[p].ch[c];p=t[p].fail)t[p].ch[c]=np;</span><br><span class="line">        <span class="keyword">if</span>(!p)&#123;t[np].fail=<span class="number">1</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line">        <span class="type">int</span> q=t[p].ch[c];</span><br><span class="line">        <span class="keyword">if</span>(t[q].len==t[p].len<span class="number">+1</span>)&#123;t[np].fail=q;<span class="keyword">return</span>;&#125;</span><br><span class="line">        <span class="type">int</span> nq=++tot;</span><br><span class="line">        t[nq]=t[q],t[nq].len=t[p].len<span class="number">+1</span>,t[q].fail=t[np].fail=nq;</span><br><span class="line">        <span class="keyword">for</span>(;p&amp;&amp;t[p].ch[c]==q;p=t[p].fail)t[p].ch[c]=nq;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">        tot=lst=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> ch:s)<span class="built_in">extend</span>(ch-<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// fail边一定是len大的连向len小的</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=tot;i++)g[t[i].len].<span class="built_in">push_back</span>(i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=t[lst].len;i;i--)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j:g[i])sz[t[j].fail]+=sz[j];</span><br><span class="line">        ll ret=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=tot;i++)<span class="keyword">if</span>(sz[i]&gt;<span class="number">1</span>)ret=<span class="built_in">max</span>(ret,(ll)sz[i]*t[i].len);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;a;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string s;cin&gt;&gt;s;</span><br><span class="line">    a.<span class="built_in">build</span>(s);</span><br><span class="line">    ll ans=a.<span class="built_in">work</span>();</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// freopen(&quot;data.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;data.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="keyword">for</span>(;byx&lt;=aqx;byx++)<span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>模板</category>
      </categories>
      <tags>
        <tag>模板</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>高精度板子</title>
    <url>/2025/01/12/%E9%AB%98%E7%B2%BE%E5%BA%A6Int%E6%9D%BF%E5%AD%90/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">int</span> aqx=<span class="number">1</span>,byx=<span class="number">1</span>,inf=<span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">998244353</span>,G=<span class="number">3</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span><span class="number">+5</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> &amp;a,<span class="type">int</span> b)</span></span>&#123;a=(a+b)%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">mul</span><span class="params">(<span class="type">int</span> &amp;a,<span class="type">int</span> b)</span></span>&#123;a=(a*b)%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a%mod)</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)ret=ret*a%mod;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">inv</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">ksm</span>(x,mod<span class="number">-2</span>);&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Int</span>&#123;<span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> w;<span class="type">bool</span> neg;vector&lt;<span class="type">int</span>&gt;a;</span><br><span class="line">    <span class="built_in">Int</span>()&#123;w=<span class="number">0</span>,neg=<span class="number">0</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;w=<span class="number">0</span>,neg=<span class="number">0</span>,a.<span class="built_in">clear</span>();&#125;</span><br><span class="line">    <span class="built_in">Int</span>(<span class="type">const</span> <span class="type">int</span> &amp;x)&#123;</span><br><span class="line">        w=<span class="number">0</span>,neg=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> y=x;</span><br><span class="line">        <span class="keyword">if</span>(y&lt;<span class="number">0</span>)neg=<span class="number">1</span>,y=-y;</span><br><span class="line">        <span class="keyword">while</span>(y)w++,a.<span class="built_in">emplace_back</span>(y%<span class="number">10</span>),y/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">expand</span><span class="params">(<span class="type">int</span> len)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!w)&#123;w=len,a.<span class="built_in">resize</span>(len);<span class="keyword">return</span>;&#125;</span><br><span class="line">        <span class="keyword">while</span>(w&lt;len)w++,a.<span class="built_in">emplace_back</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">simplify</span><span class="params">()</span></span>&#123;<span class="keyword">while</span>(w&amp;&amp;!a.<span class="built_in">back</span>())w--,a.<span class="built_in">pop_back</span>();&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">        <span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> ch:s)&#123;</span><br><span class="line">            neg^=(ch==<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isdigit</span>(ch))w++,a.<span class="built_in">emplace_back</span>(ch-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">simplify</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">friend</span> <span class="type">void</span> <span class="title">read</span><span class="params">(Int &amp;x)</span></span>&#123;string s;cin&gt;&gt;s;x.<span class="built_in">read</span>(s);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">char</span> ch=<span class="number">0</span>)</span><span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!w)&#123;cout&lt;&lt;<span class="string">&#x27;0&#x27;</span>&lt;&lt;ch;<span class="keyword">return</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span>(neg)cout&lt;&lt;<span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=w<span class="number">-1</span>;~i;i--)cout&lt;&lt;a[i];</span><br><span class="line">        cout&lt;&lt;ch;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">friend</span> <span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> Int &amp;x,<span class="type">const</span> <span class="type">char</span> ch=<span class="number">0</span>)</span></span>&#123;x.<span class="built_in">print</span>(ch);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">length</span><span class="params">()</span><span class="type">const</span></span>&#123;<span class="keyword">return</span> w;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">friend</span> <span class="type">bool</span> _equal(<span class="type">const</span> Int &amp;x,<span class="type">const</span> Int &amp;y)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x.w!=y.w)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;x.w;i++)<span class="keyword">if</span>(x.a[i]!=y.a[i])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">friend</span> <span class="type">bool</span> _less(<span class="type">const</span> Int &amp;x,<span class="type">const</span> Int &amp;y)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x.w&lt;y.w)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(x.w&gt;y.w)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=x.w<span class="number">-1</span>;~i;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(x.a[i]&lt;y.a[i])<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(x.a[i]&gt;y.a[i])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">friend</span> <span class="type">bool</span> _greater(<span class="type">const</span> Int &amp;x,<span class="type">const</span> Int &amp;y)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x.w&lt;y.w)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(x.w&gt;y.w)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=x.w<span class="number">-1</span>;~i;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(x.a[i]&lt;y.a[i])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(x.a[i]&gt;y.a[i])<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> Int &amp;x,<span class="type">const</span> Int &amp;y)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x.neg!=y.neg)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> _equal(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> Int &amp;x,<span class="type">const</span> Int &amp;y)&#123;<span class="keyword">return</span> !(x==y);&#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">friend</span> <span class="type">bool</span> <span class="built_in">operator</span>&lt;(<span class="type">const</span> Int &amp;x,<span class="type">const</span> Int &amp;y)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x.neg&amp;&amp;!y.neg)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(!x.neg&amp;&amp;y.neg)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(!x.neg)<span class="keyword">return</span> _less(x,y);</span><br><span class="line">        <span class="keyword">if</span>(x.neg)<span class="keyword">return</span> _greater(x,y);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&gt;(<span class="type">const</span> Int &amp;x,<span class="type">const</span> Int &amp;y)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x.neg&amp;&amp;!y.neg)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(!x.neg&amp;&amp;y.neg)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(!x.neg)<span class="keyword">return</span> _greater(x,y);</span><br><span class="line">        <span class="keyword">if</span>(x.neg)<span class="keyword">return</span> _less(x,y);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">const</span> Int &amp;x,<span class="type">const</span> Int &amp;y)&#123;<span class="keyword">return</span> x&lt;y||x==y;&#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> Int &amp;x,<span class="type">const</span> Int &amp;y)&#123;<span class="keyword">return</span> x&gt;y||x==y;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">friend</span> Int <span class="title">abs</span><span class="params">(<span class="type">const</span> Int &amp;x)</span></span>&#123;Int z=x;z.neg=<span class="number">0</span>;<span class="keyword">return</span> z;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">friend</span> Int _plus(<span class="type">const</span> Int &amp;x,<span class="type">const</span> Int &amp;y)&#123;</span><br><span class="line">        Int z;</span><br><span class="line">        <span class="type">int</span> w=<span class="number">0</span>;vector&lt;<span class="type">int</span>&gt;<span class="built_in">b</span>(<span class="built_in">max</span>(x.w,y.w)<span class="number">+1</span>);</span><br><span class="line">        <span class="type">int</span> carry=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;w&lt;x.w||w&lt;y.w||carry;w++)&#123;</span><br><span class="line">            <span class="type">int</span> t1=(w&lt;x.w?x.a[w]:<span class="number">0</span>),t2=(w&lt;y.w?y.a[w]:<span class="number">0</span>),t3=carry;</span><br><span class="line">            b[w]=(t1+t2+t3)%<span class="number">10</span>,carry=(t1+t2+t3)/<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        z.w=w,z.a=b;</span><br><span class="line">        <span class="keyword">return</span> z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">friend</span> Int _minus(<span class="type">const</span> Int &amp;x,<span class="type">const</span> Int &amp;y)&#123;</span><br><span class="line">        Int z;</span><br><span class="line">        <span class="type">int</span> w=<span class="number">0</span>;vector&lt;<span class="type">int</span>&gt;<span class="built_in">b</span>(<span class="built_in">max</span>(x.w,y.w));</span><br><span class="line">        <span class="type">int</span> carry=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;w&lt;x.w||w&lt;y.w||carry;w++)&#123;</span><br><span class="line">            <span class="type">int</span> t1=(w&lt;x.w?x.a[w]:<span class="number">0</span>),t2=(w&lt;y.w?y.a[w]:<span class="number">0</span>),t3=carry;</span><br><span class="line">            <span class="keyword">if</span>(t1-t2+t3&lt;<span class="number">0</span>)t3+=<span class="number">10</span>,carry=<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span> carry=<span class="number">0</span>;</span><br><span class="line">            b[w]=(t1-t2+t3)%<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        z.w=w,z.a=b;</span><br><span class="line">        z.<span class="built_in">simplify</span>();</span><br><span class="line">        <span class="keyword">return</span> z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">NTT</span><span class="params">(<span class="type">int</span> len,<span class="type">int</span> g)</span></span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;<span class="built_in">rev</span>(len);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)rev[i]=((rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)*(len&gt;&gt;<span class="number">1</span>)));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)<span class="keyword">if</span>(i&lt;rev[i])<span class="built_in">swap</span>(a[i],a[rev[i]]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;len;i&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="type">int</span> wn=<span class="built_in">ksm</span>(g,(mod<span class="number">-1</span>)/(i&lt;&lt;<span class="number">1</span>));</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;len;j+=(i&lt;&lt;<span class="number">1</span>))</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>,wk=<span class="number">1</span>;k&lt;i;k++,wk=wk*wn%mod)&#123;</span><br><span class="line">                    <span class="type">int</span> x=a[j+k],y=wk*a[j+i+k]%mod;</span><br><span class="line">                    a[j+k]=(x+y)%mod,a[j+i+k]=(x-y)%mod;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)a[i]=(a[i]+mod)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">friend</span> Int _multiply(<span class="type">const</span> Int &amp;x,<span class="type">const</span> Int &amp;y)&#123;</span><br><span class="line">        <span class="type">int</span> len=<span class="number">1</span>;<span class="keyword">while</span>(len&lt;x.w+y.w<span class="number">-1</span>)len&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        Int xx=x,yy=y;xx.<span class="built_in">expand</span>(len),yy.<span class="built_in">expand</span>(len);</span><br><span class="line">        xx.<span class="built_in">NTT</span>(len,G),yy.<span class="built_in">NTT</span>(len,G);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)<span class="built_in">mul</span>(xx.a[i],yy.a[i]);</span><br><span class="line">        xx.<span class="built_in">NTT</span>(len,<span class="built_in">inv</span>(G));</span><br><span class="line">        <span class="type">int</span> ivlen=<span class="built_in">inv</span>(len);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)<span class="built_in">mul</span>(xx.a[i],ivlen);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,carry=<span class="number">0</span>;i&lt;len||carry;i++)&#123;</span><br><span class="line">            <span class="type">int</span> bb=(xx.a[i]+carry)%<span class="number">10</span>;</span><br><span class="line">            carry=(xx.a[i]+carry)/<span class="number">10</span>,xx.a[i]=bb;</span><br><span class="line">        &#125;</span><br><span class="line">        xx.<span class="built_in">simplify</span>();</span><br><span class="line">        <span class="keyword">return</span> xx;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">friend</span> Int _divide(<span class="type">const</span> Int &amp;x,<span class="type">const</span> Int &amp;y)&#123;</span><br><span class="line">        Int z;</span><br><span class="line">        z.<span class="built_in">expand</span>(x.w);</span><br><span class="line">        Int t;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=x.w<span class="number">-1</span>;~i;i--)&#123;</span><br><span class="line">            t.<span class="built_in">simplify</span>(),t.w++,t.a.<span class="built_in">insert</span>(t.a.<span class="built_in">begin</span>(),x.a[i]);</span><br><span class="line">            <span class="keyword">while</span>(_less(y,t)||_equal(y,t))z.a[i]++,t=_minus(t,y);</span><br><span class="line">        &#125;</span><br><span class="line">        z.<span class="built_in">simplify</span>();</span><br><span class="line">        <span class="keyword">return</span> z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">friend</span> Int <span class="keyword">operator</span>+(<span class="type">const</span> Int &amp;x,<span class="type">const</span> Int &amp;y)&#123;</span><br><span class="line">        Int z;</span><br><span class="line">        <span class="keyword">if</span>(x.neg==y.neg)z=_plus(x,y),z.neg=x.neg;</span><br><span class="line">        <span class="keyword">if</span>(!x.neg&amp;&amp;y.neg)&#123;</span><br><span class="line">            <span class="keyword">if</span>(_less(x,y))z=_minus(y,x),z.neg=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> z=_minus(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x.neg&amp;&amp;!y.neg)&#123;</span><br><span class="line">            <span class="keyword">if</span>(_less(y,x))z=_minus(x,y),z.neg=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> z=_minus(y,x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> Int &amp;<span class="keyword">operator</span>+=(<span class="type">const</span> Int &amp;x)&#123;<span class="built_in">return</span> (*<span class="keyword">this</span>)=(*<span class="keyword">this</span>)+x;&#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">friend</span> Int <span class="keyword">operator</span>-(<span class="type">const</span> Int &amp;x,<span class="type">const</span> Int &amp;y)&#123;</span><br><span class="line">        Int z;</span><br><span class="line">        <span class="keyword">if</span>(x.neg!=y.neg)z=_plus(x,y),z.neg=x.neg;</span><br><span class="line">        <span class="keyword">if</span>(!x.neg&amp;&amp;!y.neg)&#123;</span><br><span class="line">            <span class="keyword">if</span>(_less(x,y))z=_minus(y,x),z.neg=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> z=_minus(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x.neg&amp;&amp;y.neg)&#123;</span><br><span class="line">            <span class="keyword">if</span>(_less(x,y))z=_minus(y,x);</span><br><span class="line">            <span class="keyword">else</span> z=_minus(x,y),z.neg=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> Int &amp;<span class="keyword">operator</span>-=(<span class="type">const</span> Int &amp;x)&#123;<span class="built_in">return</span> (*<span class="keyword">this</span>)=(*<span class="keyword">this</span>)-x;&#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">friend</span> Int <span class="keyword">operator</span>*(<span class="type">const</span> Int &amp;x,<span class="type">const</span> Int &amp;y)&#123;</span><br><span class="line">        Int z;</span><br><span class="line">        z=_multiply(x,y);</span><br><span class="line">        z.neg=x.neg^y.neg;</span><br><span class="line">        <span class="keyword">return</span> z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> Int &amp;<span class="keyword">operator</span>*=(<span class="type">const</span> Int &amp;x)&#123;<span class="built_in">return</span> (*<span class="keyword">this</span>)=(*<span class="keyword">this</span>)*x;&#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">friend</span> Int <span class="keyword">operator</span>/(<span class="type">const</span> Int &amp;x,<span class="type">const</span> Int &amp;y)&#123;</span><br><span class="line">        Int z;</span><br><span class="line">        z=_divide(x,y);</span><br><span class="line">        z.neg=x.neg^y.neg;</span><br><span class="line">        <span class="keyword">return</span> z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> Int &amp;<span class="keyword">operator</span>/=(<span class="type">const</span> Int &amp;x)&#123;<span class="built_in">return</span> (*<span class="keyword">this</span>)=(*<span class="keyword">this</span>)/x;&#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">friend</span> Int <span class="keyword">operator</span>%(<span class="type">const</span> Int &amp;x,<span class="type">const</span> Int &amp;y)&#123;<span class="keyword">return</span> x-(x/y)*y;&#125;</span><br><span class="line">    <span class="keyword">inline</span> Int &amp;<span class="keyword">operator</span>%=(<span class="type">const</span> Int &amp;x)&#123;<span class="built_in">return</span> (*<span class="keyword">this</span>)=(*<span class="keyword">this</span>)%x;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">friend</span> Int <span class="title">square</span><span class="params">(<span class="type">const</span> Int &amp;x)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> len=<span class="number">1</span>;<span class="keyword">while</span>(len&lt;x.w+x.w<span class="number">-1</span>)len&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        Int xx=x;xx.<span class="built_in">expand</span>(len);</span><br><span class="line">        xx.<span class="built_in">NTT</span>(len,G);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)<span class="built_in">mul</span>(xx.a[i],xx.a[i]);</span><br><span class="line">        xx.<span class="built_in">NTT</span>(len,<span class="built_in">inv</span>(G));</span><br><span class="line">        <span class="type">int</span> ivlen=<span class="built_in">inv</span>(len);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)<span class="built_in">mul</span>(xx.a[i],ivlen);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,carry=<span class="number">0</span>;i&lt;len||carry;i++)&#123;</span><br><span class="line">            <span class="type">int</span> bb=(xx.a[i]+carry)%<span class="number">10</span>;</span><br><span class="line">            carry=(xx.a[i]+carry)/<span class="number">10</span>,xx.a[i]=bb;</span><br><span class="line">        &#125;</span><br><span class="line">        xx.<span class="built_in">simplify</span>(),xx.neg=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> xx;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">friend</span> Int <span class="title">ksm</span><span class="params">(<span class="type">const</span> Int &amp;x,<span class="type">const</span> <span class="type">int</span> &amp;y)</span></span>&#123;</span><br><span class="line">        Int z=<span class="built_in">Int</span>(<span class="number">1</span>);</span><br><span class="line">        Int xx=x;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> t=y;t;t&gt;&gt;=<span class="number">1</span>,xx=<span class="built_in">square</span>(xx))</span><br><span class="line">            <span class="keyword">if</span>(t&amp;<span class="number">1</span>)z*=xx;</span><br><span class="line">        <span class="keyword">return</span> z;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Int x,y;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(y);</span><br><span class="line">    <span class="built_in">print</span>(x+y,<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="built_in">print</span>(x-y,<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="built_in">print</span>(x*y,<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="built_in">print</span>(x/y,<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="built_in">print</span>(x%y,<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// freopen(&quot;data.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;data.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="keyword">for</span>(;byx&lt;=aqx;byx++)<span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>模板</category>
      </categories>
      <tags>
        <tag>模板</tag>
      </tags>
  </entry>
</search>
