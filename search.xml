<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ARC083F 题解</title>
    <url>/2024/11/02/ARC083F-%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="题意">题意</h3>
<p><span class="math inline">\(n\times n\)</span> 的正方形上有 <span
class="math inline">\(2n\)</span> 个小球，第 <span
class="math inline">\(i\)</span> 个在 <span
class="math inline">\((x_i,y_i)\)</span>，坐标互不相同。<br />
有 <span class="math inline">\(n\)</span> 个 A 类机器人，第 <span
class="math inline">\(i\)</span> 个在 <span
class="math inline">\((0,i)\)</span>，有 <span
class="math inline">\(n\)</span> 个 B 类机器人，第 <span
class="math inline">\(i\)</span> 个在 <span
class="math inline">\((i,0)\)</span>。<br />
启动一个 A
类机器人后，它会向右走，将碰到的第一个球收集起来，并返回起点。启动一个 B
类机器人后，它会向上走，将碰到的第一个球收集起来，并返回起点。<br />
只有上一个机器人返回起点后，下一个机器人才会被启动。机器人一旦被使用过一次就不能被再次使用。</p>
<p>问你有多少种启动机器人的顺序，能够收集完所有小球。方案数对 <span
class="math inline">\(10^9+7\)</span> 取模 。</p>
<p><span class="math inline">\(n\leq 10^5\)</span></p>
<p><strong>Difficulty: *3500</strong></p>
<h3 id="题解">题解</h3>
<p>我们把 <span class="math inline">\((1,0)\dots (n,0)\)</span> 编号为
<span class="math inline">\(1,2,\dots ,n\)</span>，把 <span
class="math inline">\((0,1)\dots (0,n)\)</span> 编号为 <span
class="math inline">\(n+1,n+2,\dots ,n+n\)</span>，然后对于一个球 <span
class="math inline">\((x,y)\)</span>，在 <span
class="math inline">\(x\)</span> 和 <span
class="math inline">\(y+n\)</span>
之间连一条无向边。于是机器人对应点，小球对应边，操作一个机器人，相当于<strong>删掉一个点和相连的一条边</strong>（和这个点相连的其他边仍然保留）。又因为机器人和小球数量相等，所以<strong>每个机器人都必须收集一个小球</strong>，故点和边之间是完美匹配。</p>
<p>于是我们有了一张 <span class="math inline">\(|V|=|E|=2n\)</span>
的无向图，所以这是一个基环树森林……不对！基环树森林还要求每个点都有边。不过，在这个题中，一个点没有边，意味着这个机器人不能收集小球，<strong>这种情况一定无解</strong>，直接输出
<code>0</code> 就好了。</p>
<p>所以这就是<strong>基环树森林</strong>。</p>
<p>考虑删边具体是如何进行的，我们发现，操作 <span
class="math inline">\(u\)</span>
时，收集的是另一维坐标最小的小球，也就是删除<strong>另一个端点编号最小的边</strong>（<em>此后我们在考虑某个点的所有边时，直接把另一个端点的编号作为边的编号</em>）（此时另一个端点可能已经被删除，但我们仍然考虑它）。然鹅这条边不一定是我们希望删的边<del>要不然这题咋能黑</del>。显然，我们必须时刻保证，每个连通块的点数等于边数（包括那些其中一个端点已经被删除的边），要不然就会有点和边失配。在基环树上考虑，<strong>对于环上的点，我们希望删掉环上的边；否则我们希望删掉到父亲的边</strong>。我们称这条边为“对应边”，它的另一个端点为“对应点”。</p>
<p>因此我们在操作一个点 <span class="math inline">\(u\)</span> 时，在与
<span class="math inline">\(u\)</span> 相连的边中，<strong>比 <span
class="math inline">\(u\)</span>
的对应边编号小的边必须已经删掉</strong>，而删掉这条边依赖于操作另一个端点
<span class="math inline">\(v\)</span>，于是我们称 <span
class="math inline">\(u\)</span> 依赖 <span
class="math inline">\(v\)</span>。<strong>新建一张有向图</strong>，如果
<span class="math inline">\(u\)</span> 依赖 <span
class="math inline">\(v\)</span>，就连一条有向边 <span
class="math inline">\(v\rightarrow
u\)</span>。显然，<strong>这幅有向图上的所有拓扑序，就是符合题意的所有拓扑序。</strong></p>
<p>但你细想就会发现，这张有向图根本就建不出来——因为我们根本不知道环上的点的对应边是哪条！本蒟蒻在这卡了好久，去看了题解，才发现自己唐完了。<strong>同一个环上的点的对应边，要么全是逆时针方向的，要么全是顺时针方向的</strong>！我们设这个基环树森林共有
<span class="math inline">\(m\)</span> 棵基环树，<span
class="math inline">\(f_i\)</span> 表示第 <span
class="math inline">\(i\)</span> 棵基环树内部的拓扑序数量，<span
class="math inline">\(s_i\)</span> 表示第 <span
class="math inline">\(i\)</span>
棵基环树的点数，那我们只需要对每棵基环树，<strong>把顺时针和逆时针两种情况都算进
<span class="math inline">\(f_i\)</span></strong>，合并即得答案为 <span
class="math inline">\((\prod\limits_{i=1}^{m}f_i)\cdot\dbinom{2n}{s_1,s_2,\dots,s_m}\)</span>。</p>
<p>那么，对于一棵基环树，我们在指定环的方向，并建出新的有向图后，该怎么求出拓扑序数量呢？这幅有向图满足以下性质：</p>
<ol type="1">
<li>这幅图上的边，要么是基环树上儿子到父亲的边，要么是环上对应方向的边。因此每个点至多有一条出边。</li>
<li>这是一幅 DAG。因为原来的环上存在一个编号最小的点 <span
class="math inline">\(x\)</span>，以及一个对应点为 <span
class="math inline">\(x\)</span> 的点 <span
class="math inline">\(y\)</span>，<span class="math inline">\(y\)</span>
一定不依赖环上的其他点，所以原图中的唯一一个环会被断开。</li>
</ol>
<p>于是<strong>新图是内向树（不是内向基环树）森林</strong>。那这就可以
dp 了啊。设 <span class="math inline">\(g_u\)</span> 为 <span
class="math inline">\(u\)</span> 子树内的答案，<span
class="math inline">\(v\)</span> 是 <span
class="math inline">\(u\)</span> 的儿子 <span
class="math inline">\(sz_u\)</span> 为 <span
class="math inline">\(u\)</span> 的子树大小，则 <span
class="math inline">\(g_u=(\prod\limits_{v}g_v)\cdot\dbinom{sz_u-1}{\{sz_v\}}\)</span>。整个森林也是如是合并。</p>
<p>于是就做完了——建个图，找环，对于每个环，枚举顺时针和逆时针，建个新图，dp
一下，合并一下，最后再合并一下。</p>
<p><em>有没有觉得有点麻烦呢？写法可以优化！</em></p>
<p>首先，没有必要建新图，因为新图上的边都是原图上的边。先把树上的处理一下，保存必要信息，这样枚举顺逆时针的时候就只需要考虑环就好了。</p>
<p>此外，有没有发现，上面的式子大同小异呢？事实上，对所有环定向后的某个新图中，拓扑序的数量为
<span
class="math inline">\(\dfrac{(2n)!}{\prod\limits_{u}sz_u}\)</span>，归纳即证（感谢
@<a href="https://www.luogu.com.cn/user/22112">Mirach</a>
巨佬的题解对我的启发）。于是我们只需要对每棵基环树求出，顺逆时针两种情况的
<span class="math inline">\(\prod\limits_{u}\dfrac{1}{sz_u}\)</span>
之和，再把所有的乘起来（这个拆掉括号就是 <span
class="math inline">\(2^m\)</span> 种定向方案之和），最后乘以 <span
class="math inline">\((2n)!\)</span> 即可。</p>
<p>线性预处理一下逆元就可以做到 <span
class="math inline">\(O(n)\)</span>！</p>
<h3 id="code-time">Code Time！</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">int</span> inf=<span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">1e9</span><span class="number">+7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span><span class="number">+5</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> &amp;a,<span class="type">int</span> b)</span></span>&#123;a=(a+b)%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">mul</span><span class="params">(<span class="type">int</span> &amp;a,<span class="type">int</span> b)</span></span>&#123;a=a*b%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a%mod)</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)ret=ret*a%mod;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">inv</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">ksm</span>(x,mod<span class="number">-2</span>);&#125;</span><br><span class="line"><span class="type">int</span> jc[N],jcinv[N],iiv[N];</span><br><span class="line"><span class="type">int</span> n,ans;</span><br><span class="line">basic_string&lt;<span class="type">int</span>&gt;g[N];</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="type">bool</span> on[N];</span><br><span class="line"><span class="type">int</span> in[N];</span><br><span class="line"><span class="type">int</span> tot,c[N];</span><br><span class="line">basic_string&lt;<span class="type">int</span>&gt;h[N];</span><br><span class="line"><span class="type">int</span> sz[N];</span><br><span class="line"><span class="type">int</span> x[N],y[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">    vis[u]=<span class="number">1</span>,in[u]=tot;</span><br><span class="line">    <span class="type">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> v:g[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==fa)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(on[v])<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(vis[v])ret=v;</span><br><span class="line">        <span class="keyword">else</span> ret|=<span class="built_in">dfs1</span>(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ret)h[tot].<span class="built_in">push_back</span>(u),on[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(ret==u)ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">    sz[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> v:g[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==fa||on[v])<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs2</span>(v,u);</span><br><span class="line">        <span class="keyword">if</span>(v&lt;fa)sz[u]+=sz[v]; <span class="comment">// 假装这里有一条新图上的边</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">work1</span><span class="params">(<span class="type">int</span> i)</span></span>&#123; <span class="comment">// 只需处理环</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;c[i];j++)&#123;</span><br><span class="line">        <span class="type">int</span> u=h[i][j];</span><br><span class="line">        sz[u]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> v:g[u])</span><br><span class="line">            <span class="keyword">if</span>(!on[v]&amp;&amp;v&lt;h[i][j<span class="number">+1</span>])</span><br><span class="line">                sz[u]+=sz[v]; <span class="comment">// 假装这里有一条新图上的边</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 找到在哪里断环</span></span><br><span class="line">    <span class="type">int</span> mn=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;c[i];j++)<span class="keyword">if</span>(h[i][j]&lt;h[i][mn])mn=j;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=mn;j&lt;c[i];j++)&#123;</span><br><span class="line">        <span class="type">int</span> u=h[i][j],v=(!j?h[i][c[i]<span class="number">-1</span>]:h[i][j<span class="number">-1</span>]);</span><br><span class="line">        <span class="keyword">if</span>(v&lt;h[i][j<span class="number">+1</span>])sz[u]+=sz[v]; <span class="comment">// 假装这里有一条新图上的边</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;mn;j++)&#123;</span><br><span class="line">        <span class="type">int</span> u=h[i][j],v=(!j?h[i][c[i]<span class="number">-1</span>]:h[i][j<span class="number">-1</span>]);</span><br><span class="line">        <span class="keyword">if</span>(v&lt;h[i][j<span class="number">+1</span>])sz[u]+=sz[v]; <span class="comment">// 假装这里有一条新图上的边</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把环上的信息和子树信息合并</span></span><br><span class="line">    <span class="type">int</span> xx=x[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;c[i];j++)<span class="built_in">mul</span>(xx,iiv[sz[h[i][j]]]);</span><br><span class="line">    <span class="built_in">add</span>(y[i],xx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,x,y;i&lt;=n*<span class="number">2</span>;i++)cin&gt;&gt;x&gt;&gt;y,g[x].<span class="built_in">push_back</span>(y+n),g[y+n].<span class="built_in">push_back</span>(x);</span><br><span class="line">    n*=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(!g[i].<span class="built_in">size</span>())&#123;cout&lt;&lt;<span class="string">&quot;0\n&quot;</span>;<span class="keyword">return</span>;&#125; <span class="comment">// 不是基环树森林，无解</span></span><br><span class="line">    jc[<span class="number">0</span>]=<span class="number">1</span>;<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)jc[i]=jc[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">    jcinv[n]=<span class="built_in">inv</span>(jc[n]);<span class="keyword">for</span>(<span class="type">int</span> i=n;i;i--)jcinv[i<span class="number">-1</span>]=jcinv[i]*i%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)iiv[i]=jcinv[i]*jc[i<span class="number">-1</span>]%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">if</span>(!vis[i])tot++,<span class="built_in">dfs1</span>(i,<span class="number">0</span>),c[tot]=h[tot].<span class="built_in">size</span>(),h[tot].<span class="built_in">push_back</span>(h[tot][<span class="number">0</span>]); <span class="comment">// 找环</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">if</span>(on[i])<span class="built_in">dfs2</span>(i,<span class="number">0</span>); <span class="comment">// 处理子树信息</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)x[i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">if</span>(!on[i])<span class="built_in">mul</span>(x[in[i]],iiv[sz[i]]); <span class="comment">// 统计子树信息</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)&#123;</span><br><span class="line">        <span class="built_in">work1</span>(i); <span class="comment">// 顺时针</span></span><br><span class="line">        <span class="built_in">reverse</span>(h[i].<span class="built_in">begin</span>(),h[i].<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">work1</span>(i); <span class="comment">// 逆时针</span></span><br><span class="line">    &#125;</span><br><span class="line">    ans=jc[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)<span class="built_in">mul</span>(ans,y[i]);</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// freopen(&quot;data.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;data.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="type">int</span> aqx=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(aqx--)<span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>计数</tag>
        <tag>组合数学</tag>
      </tags>
  </entry>
  <entry>
    <title>I cant believe it can sort</title>
    <url>/2025/04/28/I-cant-believe-it-can-sort/</url>
    <content><![CDATA[<h3 id="i-cant-believe-it-can-sort">I can't believe it can sort！</h3>
<p>对长度为 <span class="math inline">\(n\)</span> 的排列 <span
class="math inline">\(a\)</span> 执行如下操作：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;a[j])<span class="built_in">swap</span>(a[i],a[j]),cnt++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（1）证明：执行后 <span class="math inline">\(a\)</span> 递减。</p>
<p>（2）设 <span class="math inline">\(a\)</span> 在所有长度为 <span
class="math inline">\(n\)</span> 的排列中均匀随机，求交换次数的期望，即
<span class="math inline">\(E(cnt)\)</span>。</p>
<p>（1）<strong>证明</strong>：</p>
<p>归纳可证，第一重循环执行完前 <span class="math inline">\(i\)</span>
层后，<span class="math inline">\(a_i=1\)</span> 且 <span
class="math inline">\(a_1,a_2,\dots,a_i\)</span> 递减。</p>
<p>（2）<strong>解</strong>：</p>
<p>设前缀 <span class="math inline">\(\min\)</span> 序列为 <span
class="math inline">\(b_1,b_2,\dots,b_k,1\)</span>。</p>
<p>第一层（即第一重循环 <span class="math inline">\(i=1\)</span>
时）操作为将 <span class="math inline">\(b\)</span> 向右循环移位，变为
<span class="math inline">\(1,b_1,b_2,\dots,b_k\)</span>，交换次数期望为
<span class="math inline">\(E(k)=H_n-1\)</span>（<span
class="math inline">\(H_n=\sum_{i=1}^{n}\frac{1}{i}\)</span>）。</p>
<p>对 <span class="math inline">\(i\)</span> 的操作即为从前往后枚举
<span class="math inline">\(a_j&lt;a_i\)</span> 并交换 <span
class="math inline">\(a_i,a_j\)</span>。因为 <span
class="math inline">\(a_1,a_2,\dots a_{i-1}\)</span>
降序，所以交换后不影响大小关系；又因为操作完 <span
class="math inline">\(j&lt;i\)</span> 后，<span
class="math inline">\(a_i=1\)</span>，所以不会有 <span
class="math inline">\(j&gt;i\)</span>
的操作。故操作次数为全局顺序对个数。</p>
<p>现在假设第一层操作是变为 <span
class="math inline">\(1,b_2,b_3,\dots,b_k,b_1\)</span>，则 <span
class="math inline">\(a_2,a_3,\dots,a_n\)</span>
均匀分布。由于前面固定有一个 <span
class="math inline">\(1\)</span>，故顺序对个数期望为：</p>
<p><span
class="math display">\[n-1+\frac{(n-1)(n-2)}{4}=\frac{n(n-1)}{4}+\frac{n-1}{2}\]</span>。</p>
<p>接下来考虑，这样比实际情况多算了多少顺序对。对比 <span
class="math inline">\(b_1,b_2,\dots,b_k\)</span> 和 <span
class="math inline">\(b_2,b_3,\dots,b_k,b_1\)</span>（<span
class="math inline">\(b_1&gt;b_2&gt;\dots&gt;b_k\)</span>）。令 <span
class="math inline">\(c\)</span> 为除了 <span
class="math inline">\(1\)</span> 和 <span
class="math inline">\(b\)</span> 以外的序列，<span
class="math inline">\(p_x\)</span> 为 <span
class="math inline">\(x\)</span> 在原序列上的位置。称 <span
class="math inline">\(a&#39;\)</span> 为第一层操作后的实际序列，<span
class="math inline">\(a&#39;&#39;\)</span> 为上述假设得到的序列。</p>
<p>当 <span class="math inline">\(k=0\)</span> 即 <span
class="math inline">\(a_1=1\)</span> 时，显然没有多算。</p>
<p>当 <span class="math inline">\(k&gt;0\)</span> 时，先对于某个排列
<span class="math inline">\(a\)</span>
求出来一个可以算出期望的式子：</p>
<p><span class="math inline">\(b\)</span> 内部多算了 <span
class="math inline">\(k-1\)</span>；<span
class="math inline">\(c\)</span> 内部不变。对于 <span
class="math inline">\(b\)</span> 和 <span
class="math inline">\(c\)</span> 之间的顺序对：</p>
<ul>
<li>如果 <span class="math inline">\(c_i&gt;b_1\)</span>，贡献为 <span
class="math inline">\(0\)</span>。</li>
<li>如果 <span class="math inline">\(b_1&gt;c_i&gt;b_k\)</span>，设
<span class="math inline">\(b_{x-1}&gt;c_i&gt;b_x\)</span>，则 <span
class="math inline">\(p_{c_i}&gt;p_{b_x}\)</span>。如果 <span
class="math inline">\(p_{c_i}&lt;p_1\)</span>，则贡献为 <span
class="math inline">\(2\)</span>，否则为 <span
class="math inline">\(0\)</span>。</li>
<li>如果 <span class="math inline">\(c_i&lt;b_k\)</span>，贡献为 <span
class="math inline">\(0\)</span>。</li>
</ul>
<p>所以需要求，<span class="math inline">\(b_1&gt;x&gt;b_k\)</span> 且
<span class="math inline">\(p_{x}&lt;p_1\)</span> 且 <span
class="math inline">\(x \notin b\)</span> 的 <span
class="math inline">\(x\)</span> 的个数。发现如果 <span
class="math inline">\(x&lt;b_k\)</span>，则一定有 <span
class="math inline">\(p_x&gt;p_1\)</span>。将限制改为 <span
class="math inline">\(b_1 \geq x&gt;1\)</span> 且 <span
class="math inline">\(p_{x}&lt;p_1\)</span>，去掉 <span
class="math inline">\(x \notin b\)</span> 的限制，设这样的 <span
class="math inline">\(x\)</span> 的个数为 <span
class="math inline">\(u\)</span>，则贡献为 <span
class="math inline">\(2(u-k)\)</span>。</p>
<p>所以这部分的总贡献为 <span
class="math inline">\(2u-k-1\)</span>。发现当 <span
class="math inline">\(a_1=1\)</span> 时，<span
class="math inline">\(u=k=0\)</span>，按照这个式子算出来是 <span
class="math inline">\(-1\)</span> 而不是 <span
class="math inline">\(0\)</span>，需要加回去，所以期望贡献为 <span
class="math inline">\(2E(u)-E(k)-1+\frac{1}{n}\)</span>。</p>
<p><span
class="math display">\[E(u)=\frac{1}{n}\sum_{i=2}^{n}\left(\frac{1}{n-1}\sum_{j=2}^{n}\left(1+\frac{(i-2)(j-2)}{n-2}\right)\right)=\frac{n+1}{4}-\frac{1}{2n}\]</span></p>
<p><span
class="math display">\[2E(u)-E(k)-1+\frac{1}{n}=\frac{n+1}{2}-H(n)+1\]</span></p>
<p>所以交换次数的期望为：</p>
<p><span
class="math display">\[E(cnt)=H_n+\left(\frac{n(n-1)}{4}+\frac{n-1}{2}\right)-\left(\frac{n+1}{2}-H(n)+1\right)=2H_n+\frac{n(n-1)}{4}-2\]</span>。</p>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>期望</tag>
      </tags>
  </entry>
  <entry>
    <title>Image-tester</title>
    <url>/2024/11/04/Image-tester/</url>
    <content><![CDATA[<p><img src="background.png" /></p>
]]></content>
      <categories>
        <category>Hexo</category>
        <category>Test</category>
      </categories>
  </entry>
  <entry>
    <title>CF1679F 题解</title>
    <url>/2024/11/19/CF1679F-%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="题意">题意</h3>
<p>给定 <span class="math inline">\(m\)</span>
组<strong>无序</strong>数对 <span
class="math inline">\((u_i,v_i)\)</span>。<br />
对于 <span class="math inline">\(n\)</span> 位十进制整数 <span
class="math inline">\(A\)</span>（可以有前导 <span
class="math inline">\(0\)</span>），若 <span
class="math inline">\(A\)</span> 的相邻两位数 <span
class="math inline">\((x,y)\)</span> 存在于这 <span
class="math inline">\(m\)</span> 个数对当中，则可以交换这两位。若 <span
class="math inline">\(A\)</span> 可以通过若干次操作变成 <span
class="math inline">\(B\)</span>，则称 <span
class="math inline">\(A\)</span> 和 <span
class="math inline">\(B\)</span> 等价。</p>
<p>求出最大整数 <span
class="math inline">\(k\)</span>，使得存在一组非负整数 <span
class="math inline">\(x_1,x_2,\ldots,x_k(0\leq x_i&lt;10^n)\)</span>
满足对于任意 <span class="math inline">\(1\leq i&lt;j\leq
k\)</span>，<span class="math inline">\(x_i\)</span> 与 <span
class="math inline">\(x_j\)</span> 不等价。</p>
<p><span class="math inline">\(n \leq 50000\)</span></p>
<p><strong>Difficulty: *2600</strong></p>
<h3 id="题解">题解</h3>
<p>显然有若干个等价类，所以只需要对等价类计数就好。<br />
每个等价类只取最小的数作为代表，所以就是要求出，有多少个 <span
class="math inline">\(n\)</span>
位数，使得它<strong>不能通过操作变得更小</strong>。</p>
<p>设 <span class="math inline">\(ok_{u,v}=\text{true}\)</span>
表示输入中<strong>不存在</strong>无序对 <span
class="math inline">\((u,v)\)</span>。<br />
考虑什么时候可以在下一位填一个 <span
class="math inline">\(k\)</span>，就是，填上 <span
class="math inline">\(k\)</span>
之后，往前一直能换就换，过程中不能碰到一个大于 <span
class="math inline">\(k\)</span> 的。<br />
所以当这一位填了 <span class="math inline">\(x\)</span> 之后：</p>
<ul>
<li>所有 <span class="math inline">\(ok_{x,k}=\text{true}\)</span> 的
<span class="math inline">\(k\)</span> 都可以填在下一位（这里面包括
<span class="math inline">\(x=k\)</span>），<br />
</li>
<li>所有 <span class="math inline">\(ok_{x,k}=\text{false} \ \wedge \
k&lt;x\)</span> 的 <span class="math inline">\(k\)</span>
都不能填在下一位，<br />
</li>
<li>所有 <span class="math inline">\(ok_{x,k}=\text{false} \ \wedge \
k&gt;x\)</span> 的 <span
class="math inline">\(k\)</span>，这一位能填的下一位也可以，这一位不能填的下一位也不行。</li>
</ul>
<p>立即有 <span class="math inline">\(f_{i,sta}\)</span>
表示，现在填完了从高到低前 <span class="math inline">\(i\)</span>
位，下一位能填的数的集合为 <span
class="math inline">\(sta\)</span>，有多少种方案。枚举下一位填的数 <span
class="math inline">\(k\)</span>，即得 <span
class="math inline">\(sta&#39;\)</span>，转移即可。<br />
令 <span class="math inline">\(w=10\)</span>，时间复杂度 <span
class="math inline">\(O(n\cdot 2^w \cdot w)\)</span>。</p>
<h3 id="code-time">Code Time！</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">int</span> inf=<span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">50005</span>,M=<span class="number">55</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> &amp;a,<span class="type">int</span> b)</span></span>&#123;a=(a+b)%mod;&#125;</span><br><span class="line"><span class="type">int</span> n,m,ans,ed=<span class="number">1023</span>;</span><br><span class="line"><span class="type">bool</span> ok[M][M];</span><br><span class="line"><span class="type">int</span> cur,f[<span class="number">2</span>][<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> rst[N],jia[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">10</span>;j++)</span><br><span class="line">            ok[i][j]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v;i&lt;=m;i++)cin&gt;&gt;u&gt;&gt;v,ok[v][u]=<span class="number">0</span>,ok[u][v]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        rst[i]=ed;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;i;j++)</span><br><span class="line">            <span class="keyword">if</span>(!ok[i][j])rst[i]^=(<span class="number">1</span>&lt;&lt;j);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">10</span>;j++)</span><br><span class="line">            <span class="keyword">if</span>(ok[i][j])jia[i]|=(<span class="number">1</span>&lt;&lt;j);</span><br><span class="line">    &#125;</span><br><span class="line">    cur=<span class="number">0</span>,f[cur][ed]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cur^=<span class="number">1</span>,<span class="built_in">memset</span>(f[cur],<span class="number">0</span>,<span class="built_in">sizeof</span>(f[cur]));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=ed;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!f[cur^<span class="number">1</span>][j])<span class="keyword">continue</span>;</span><br><span class="line">            f[cur^<span class="number">1</span>][j]%=mod;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;<span class="number">10</span>;k++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!((j&gt;&gt;k)&amp;<span class="number">1</span>))<span class="keyword">continue</span>;</span><br><span class="line">                <span class="type">int</span> jj=(j&amp;rst[k])|jia[k];</span><br><span class="line">                f[cur][jj]+=f[cur^<span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=ed;i++)<span class="built_in">add</span>(ans,f[cur][i]);</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// freopen(&quot;data.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;data.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="type">int</span> aqx=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(aqx--)<span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>计数</tag>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>CF2081C 题解</title>
    <url>/2025/03/19/CF2081C-%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="题意">题意</h3>
<p>给定一个由 <span class="math inline">\(0,1,2,3\)</span> 组成的 <span
class="math inline">\(n \times m\)</span>
矩阵，问最少修改多少个位置，使得每行、每列的异或和分别为零，并构造方案。</p>
<p><span class="math inline">\(n,m \leq 1000\)</span></p>
<p><strong>Difficulty: *2700</strong></p>
<h3 id="题解">题解</h3>
<p>令 <span class="math inline">\(r_i\)</span> 表示第 <span
class="math inline">\(i\)</span> 行的异或和，<span
class="math inline">\(c_j\)</span> 表示第 <span
class="math inline">\(j\)</span> 列的异或和，则一次修改，等价于任意选择
<span class="math inline">\((i,j,x)\)</span>，令 <span
class="math inline">\(r_i \leftarrow r_i \oplus x, \space c_j \leftarrow
c_j \oplus x\)</span>。</p>
<p>将行、列均视为点（点权分别为 <span
class="math inline">\(r,c\)</span>），每次操作视为在第 <span
class="math inline">\(i\)</span> 行和第 <span
class="math inline">\(j\)</span> 列之间连一条边权为 <span
class="math inline">\(x\)</span> 的边，则，<strong>一个点集 <span
class="math inline">\(V\)</span> 可以不向外连边的充要条件</strong> <span
class="math inline">\(p\)</span> 为：</p>
<ul>
<li>若 <span class="math inline">\(V\)</span> 中有点权非零的行/列，则
<span class="math inline">\(V\)</span>
中<strong>至少存在一行一列</strong>，其必要性是因为必须得操作。</li>
<li><span class="math inline">\(V\)</span>
中的<strong>点权异或和为零</strong>，其必要性是因为一次操作不改变所有点权的异或和（显然整个矩阵满足这个条件）。</li>
</ul>
<p>而充分性是因为，对于这样一个点集 <span
class="math inline">\(V\)</span>，设其中有 <span
class="math inline">\(h\)</span> 行 <span
class="math inline">\(w\)</span> 列，可以构造如下方案：</p>
<ul>
<li>选择一行 <span class="math inline">\(x\)</span> 和 <span
class="math inline">\(w-1\)</span> 列 <span class="math inline">\(y_1,
\dots y_{w-1}\)</span>，分别操作 <span
class="math inline">\((x,y_j,c_{y_j})\)</span>，让这些列的 <span
class="math inline">\(c\)</span> 归零。</li>
<li>再用剩余的一列 <span class="math inline">\(y_w\)</span>
和所有行操作，使所有行归零。</li>
</ul>
<p>显然，在这些操作之后，<span class="math inline">\(c_{y_w}\)</span>
也是零，因为其他点权都是零了，而所有点权异或和也是零，那么剩下的一个点也必然是零。</p>
<p>根据上述方案，我们又得到一个关键结论：在最优解中，<strong>一个连通块必然是一棵树</strong>，操作次数即为
<span class="math inline">\(n+m\)</span>
<strong>减去连通块个数</strong>。</p>
<p>所以我们需要将图分成<strong>尽可能多的连通块</strong>。也就是说，我们需要将
<span class="math inline">\(n\)</span> 行 <span
class="math inline">\(m\)</span>
列分成<strong>尽可能多的组</strong>，使得每一组均满足条件 <span
class="math inline">\(p\)</span>（如果某一组在最优方案中被划分成多个连通块，那这一组也可以被划分，这样组数就不是最多了，所以可以认为一组对应一个连通块）。</p>
<p>在下面的讨论中，我们不再考虑点权为零的点（或者说，把这些点一个分一组），并对组的划分做一个特殊处理：<strong>允许剩余未分组的点，但是它们要消耗一次操作</strong>。这是等价的，因为在实际构造时，可以把这些点放到任意一组中（显然，最优方案下，不会存在所有点都未分组的情况）。</p>
<p>接下来，我们探究一些性质。将大小为 <span
class="math inline">\(i\)</span> 的组记为 <span
class="math inline">\(P_i\)</span>，将 <span
class="math inline">\(i\)</span> 个未分组的点记为 <span
class="math inline">\(Q_i\)</span>。对于一个组，我们只关心其中 <span
class="math inline">\(r_i\)</span> 的可重集 <span
class="math inline">\(R\)</span> 和 <span
class="math inline">\(c_j\)</span> 的可重集 <span
class="math inline">\(C\)</span>。<strong>对于所有不满足以下某个性质的分组，均可以通过特定调整，使之满足所有性质，且组数不变少</strong>：</p>
<ol type="1">
<li><p><strong>组的大小至多为 <span
class="math inline">\(4\)</span></strong>。</p>
<blockquote>
<p>证明：对于一个点数大于 <span class="math inline">\(4\)</span>
的点集，一定存在一个非空真子集满足异或和为零。所以，这个组要么可以被拆分成至少两个组，要么可以拆分出未分组的点。以下均不考虑可以进行这种拆分的组。</p>
</blockquote></li>
<li><p><strong><span class="math inline">\(P_4\)</span>
的构成为两个相同的 <span class="math inline">\(r\)</span> 和两个相同的
<span class="math inline">\(c\)</span></strong>。</p>
<blockquote>
<p>与 1 类似。</p>
</blockquote></li>
<li><p><strong>不存在 <span class="math inline">\(r=c\)</span> 均不属于
<span class="math inline">\(P_2\)</span></strong>。</p>
<blockquote>
<p>证明：假设存在 <span class="math inline">\(r=c\)</span>。<span
class="math inline">\(r\)</span> 和 <span
class="math inline">\(c\)</span>
不能都不参与分组，否则组数不是最多；如果在同一组，可以拆分使之满足；如果不在同一组或其中一个未分组，可以令
<span class="math inline">\(r,c\)</span>
成为一组，原先两组其他数成为一组。</p>
</blockquote></li>
<li><p><strong>在所有不属于 <span class="math inline">\(P_2\)</span>
的点中，不存在 <span class="math inline">\(r_1 \not= r_2 \not=
c\)</span>（或 <span class="math inline">\(r \not= c_1 \not=
c_2\)</span>）均不属于 <span class="math inline">\(P_3\)</span>（即属于
<span class="math inline">\(P_4\)</span>）</strong>。</p>
<blockquote>
<p>证明：假设存在 <span class="math inline">\(r_1 \not= r_2 \not=
c\)</span>。因为三个数分别为 <span
class="math inline">\(1,2,3\)</span>，有 <span class="math inline">\(r_1
\oplus r_2 \oplus c =0\)</span>。由 3 得，所涉及的组中只有 <span
class="math inline">\(r_1,r_2,c\)</span>；又由 2
得，如果先调整为满足性质 2 再考虑此性质，则存在 <span
class="math inline">\(r_1,r_1,c,c\)</span> 和 <span
class="math inline">\(r_2,r_2,c,c\)</span>，调整为两组 <span
class="math inline">\(r_1,r_2,c\)</span> 和两个未分组的 <span
class="math inline">\(c\)</span> 即可。</p>
</blockquote></li>
</ol>
<p>对于一种不满足以上某个性质的分组，我们进行该性质证明中的调整，如果仍有不满足的性质则继续，容易证明不会出现循环。所以，<strong>我们在求最优解时，只考虑满足以上所有性质的分组方案即可</strong>。</p>
<p>由 3 得，我们可以<strong>先贪心地分 <span
class="math inline">\(P_2\)</span></strong>，即将值为 <span
class="math inline">\(1,2,3\)</span> 的 <span
class="math inline">\(r,c\)</span> 之间分别配对。此时，剩余的 <span
class="math inline">\(1,2,3\)</span> 分别只有 <span
class="math inline">\(r\)</span> 或 <span
class="math inline">\(c\)</span>，如果总共只有 <span
class="math inline">\(r\)</span> 或 <span
class="math inline">\(c\)</span> 则无法继续分组；否则，<span
class="math inline">\(P_3\)</span> 只能是 <span
class="math inline">\(1,2,3\)</span> 各一个，由 <span
class="math inline">\(4\)</span> 得，可以<strong>再贪心地分 <span
class="math inline">\(P_3\)</span></strong>。然后<strong>再按照 2 分
<span class="math inline">\(P_4\)</span></strong> 即可。</p>
<p>所以这题就是一个简单贪心啦~</p>
<p>实现上，存一下等于 <span class="math inline">\(1,2,3\)</span> 的
<span class="math inline">\(r,c\)</span>
分别有哪些行列，模拟即可。对于未分组的点，显然要么只有 <span
class="math inline">\(r\)</span>，要么只有 <span
class="math inline">\(c\)</span>，且异或和为 <span
class="math inline">\(0\)</span>，和同一行/列操作即可。</p>
<h3 id="code-time">Code Time！</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// #define int long long</span></span><br><span class="line"><span class="type">int</span> aqx=<span class="number">1</span>,byx=<span class="number">1</span>,inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1005</span>;</span><br><span class="line"><span class="type">int</span> n,m,a[N][N],ans;</span><br><span class="line"><span class="type">int</span> r[N],c[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;pr[<span class="number">4</span>],pc[<span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        string s;cin&gt;&gt;s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)a[i][j]=s[j<span class="number">-1</span>]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        r[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)r[i]^=a[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        c[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)c[i]^=a[j][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">3</span>;i++)pr[i].<span class="built_in">clear</span>(),pc[i].<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)pr[r[i]].<span class="built_in">push_back</span>(i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)pc[c[i]].<span class="built_in">push_back</span>(i);</span><br><span class="line">    ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)</span><br><span class="line">        <span class="keyword">while</span>(pr[i].<span class="built_in">size</span>()&amp;&amp;pc[i].<span class="built_in">size</span>())</span><br><span class="line">            ans++,a[pr[i].<span class="built_in">back</span>()][pc[i].<span class="built_in">back</span>()]^=i,pr[i].<span class="built_in">pop_back</span>(),pc[i].<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i<span class="number">+1</span>;j&lt;=<span class="number">3</span>;j++)</span><br><span class="line">            <span class="keyword">while</span>(pr[i].<span class="built_in">size</span>()&amp;&amp;pr[j].<span class="built_in">size</span>()&amp;&amp;pc[i^j].<span class="built_in">size</span>())&#123;</span><br><span class="line">                ans+=<span class="number">2</span>,a[pr[i].<span class="built_in">back</span>()][pc[i^j].<span class="built_in">back</span>()]^=i,a[pr[j].<span class="built_in">back</span>()][pc[i^j].<span class="built_in">back</span>()]^=j;</span><br><span class="line">                pr[i].<span class="built_in">pop_back</span>(),pr[j].<span class="built_in">pop_back</span>(),pc[i^j].<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i<span class="number">+1</span>;j&lt;=<span class="number">3</span>;j++)</span><br><span class="line">            <span class="keyword">while</span>(pc[i].<span class="built_in">size</span>()&amp;&amp;pc[j].<span class="built_in">size</span>()&amp;&amp;pr[i^j].<span class="built_in">size</span>())&#123;</span><br><span class="line">                ans+=<span class="number">2</span>,a[pr[i^j].<span class="built_in">back</span>()][pc[i].<span class="built_in">back</span>()]^=i,a[pr[i^j].<span class="built_in">back</span>()][pc[j].<span class="built_in">back</span>()]^=j;</span><br><span class="line">                pc[i].<span class="built_in">pop_back</span>(),pc[j].<span class="built_in">pop_back</span>(),pr[i^j].<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">3</span>;j++)</span><br><span class="line">            <span class="keyword">while</span>(pr[i].<span class="built_in">size</span>()&gt;=<span class="number">2</span>&amp;&amp;pc[j].<span class="built_in">size</span>()&gt;=<span class="number">2</span>)&#123;</span><br><span class="line">                ans++,a[pr[i].<span class="built_in">back</span>()][pc[j].<span class="built_in">back</span>()]^=i,pr[i].<span class="built_in">pop_back</span>();</span><br><span class="line">                ans++,a[pr[i].<span class="built_in">back</span>()][pc[j].<span class="built_in">back</span>()]^=(i^j),pc[j].<span class="built_in">pop_back</span>();</span><br><span class="line">                ans++,a[pr[i].<span class="built_in">back</span>()][pc[j].<span class="built_in">back</span>()]^=j,pr[i].<span class="built_in">pop_back</span>(),pc[j].<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)<span class="keyword">while</span>(pr[i].<span class="built_in">size</span>())ans++,a[pr[i].<span class="built_in">back</span>()][<span class="number">1</span>]^=i,pr[i].<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)<span class="keyword">while</span>(pc[i].<span class="built_in">size</span>())ans++,a[<span class="number">1</span>][pc[i].<span class="built_in">back</span>()]^=i,pc[i].<span class="built_in">pop_back</span>();</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            cout&lt;&lt;a[i][j];</span><br><span class="line">            <span class="keyword">if</span>(j==m)cout&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// freopen(&quot;data.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;data.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="keyword">for</span>(cin&gt;&gt;aqx;byx&lt;=aqx;byx++)<span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>Password tester(123456)</title>
    <url>/2024/11/03/Password-tester/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="ecd3cd297b4b8c955353f80717691ab0653cf1776ca474cdadf10ad8e665c6da">4630436162ade97ba2718b7d0c4b3b633edd16a8c78b7d4a375abf0237cd065b1fdd7fe03f8f5b88b0b2ae7e4e8ad067</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Hexo</category>
        <category>Test</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/11/01/hello-world/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Hello world!\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very
first post. Check <a href="https://hexo.io/docs/">documentation</a> for
more info. If you get any problems when using Hexo, you can find the
answer in <a
href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or
you can ask me on <a
href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="quick-start">Quick Start</h2>
<p><strong>Run commands at E:\github\blog.</strong></p>
<h3 id="create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br><span class="line"><span class="comment"># n -&gt; new</span></span><br></pre></td></tr></table></figure>
<p>More info: <a
href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line"><span class="comment"># s -&gt; server</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line"><span class="comment"># g -&gt; generate</span></span><br></pre></td></tr></table></figure>
<p>More info: <a
href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br><span class="line"><span class="comment"># d -&gt; deploy</span></span><br></pre></td></tr></table></figure>
<p>More info: <a
href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<h3 id="quick-preview">Quick preview</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sh preview.sh</span><br></pre></td></tr></table></figure>
<h3 id="quick-deploy">Quick deploy</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sh deploy.sh</span><br></pre></td></tr></table></figure>
<h2 id="post-settings">Post settings</h2>
<h3 id="where-are-they">Where are they?</h3>
<p>E:\github\blog\source\_posts</p>
<h3 id="add-to-categories">Add to categories</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">categories: xxx</span><br></pre></td></tr></table></figure>
<h3 id="add-tags">Add tags</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tags:</span><br><span class="line">  - tag1</span><br><span class="line">  - tag2</span><br></pre></td></tr></table></figure>
<h3 id="pin-to-top">Pin to top</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># add to front-matter</span><br><span class="line">top: true  #add &quot;置顶&quot;</span><br><span class="line">sticky: x (1~100) #add an icon; set priority</span><br><span class="line"># These are different plugins.</span><br></pre></td></tr></table></figure>
<h3 id="hide-article">Hide article</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># add to front-matter</span><br><span class="line">hide: true</span><br><span class="line"># This will hide a post from home page</span><br></pre></td></tr></table></figure>
<h3 id="encrypt-article">Encrypt article</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># add to front-matter</span><br><span class="line">password: 123456</span><br></pre></td></tr></table></figure>
<h3 id="insert-image">Insert image</h3>
<p>A folder with the same name will be created when
<code>hexo n ""</code>. Put images in this folder and then use
<code>![](xxx\xxx.png)</code>. Note that images won't be loaded properly
on home page.</p>
]]></content>
      <categories>
        <category>Hexo</category>
        <category>Guideline</category>
      </categories>
  </entry>
  <entry>
    <title>P10218 省选联考2024D1T2 题解</title>
    <url>/2025/02/16/P10218-%E7%9C%81%E9%80%89%E8%81%94%E8%80%832024D1T2-%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="题意">题意</h3>
<p>给定 <span class="math inline">\(a_1,a_2,\dots,a_n\)</span> 以及
<span class="math inline">\(b_1,b_2,\dots,b_n\)</span>，满足 <span
class="math inline">\(a_i \in [0,2^k-1]\)</span> 以及 <span
class="math inline">\(b_i\geq 0\)</span>，你需要给出 <span
class="math inline">\(S \subseteq \{1,2,\dots,n\}\)</span> 以及 <span
class="math inline">\(x \in [0,2^k-1]\)</span> 满足以下条件：</p>
<ul>
<li><span class="math inline">\(\sum \limits_{i\in S} b_i\leq
m\)</span>；</li>
<li>满足以上条件的前提下，最大化 <span
class="math inline">\(val(S,x)=\min(\min \limits_{i \in S}(a_i+x),\min
\limits_{i \in U \backslash S}(a_i \oplus x))\)</span> 的值。</li>
</ul>
<p>你只需要给出最大的 <span class="math inline">\(val(S,x)\)</span>
的值即可。</p>
<p><strong>Difficulty: 黑</strong></p>
<h3 id="题解">题解</h3>
<p>先判掉 <span class="math inline">\(\sum b_i \le
m\)</span>，此时全部选加法。否则，答案不会超过 <span
class="math inline">\(k\)</span> 位。</p>
<p>在由 <span class="math inline">\(a\)</span> 建的 trie
上<strong>按位贪心</strong>，从高到低确定<strong>答案</strong>的每一位是否可以是
<span class="math inline">\(1\)</span>。</p>
<p>设现在要确定答案的第 <span class="math inline">\(t\)</span>
位，已知更高位的答案为 <span class="math inline">\(w\)</span>，当前的
<span class="math inline">\(x\)</span>，<span
class="math inline">\(S\)</span> 内最小的 <span
class="math inline">\(a_i\)</span> 为 <span
class="math inline">\(y\)</span>，<span class="math inline">\(m\)</span>
还剩多少，在 trie 上走到了节点 <span
class="math inline">\(p\)</span>（表示 <span
class="math inline">\(p\)</span> 子树外的 <span
class="math inline">\(a_i\)</span> 要么被分进了 <span
class="math inline">\(S\)</span>，要么已经不会限制答案，即某一位上答案是
<span class="math inline">\(0\)</span>，但 <span
class="math inline">\(a_i \oplus x\)</span> 是 <span
class="math inline">\(1\)</span>；而从根到 <span
class="math inline">\(p\)</span> 的路径异或 <span
class="math inline">\(x\)</span> 恰好是 <span
class="math inline">\(w\)</span>）。<br />
下面称“高位”为大于 <span class="math inline">\(t\)</span>
的位，即已经被确定的位；“低位”为小于等于 <span
class="math inline">\(t\)</span> 的位，即还没有被确定的位。<br />
我们要求，总存在一种方案，使得 <span class="math inline">\(w\)</span>
的高位能被满足。当只考虑异或的时候，无论 <span
class="math inline">\(x\)</span> 的低位取多少，都不会影响 <span
class="math inline">\(w\)</span> 的高位。但是，由于 <span
class="math inline">\(y\)</span> 加上 <span
class="math inline">\(x\)</span> 的高位可能还不到 <span
class="math inline">\(w\)</span>，所以需要有 <span
class="math inline">\(y+x+(2^{t+1}-1) \ge w\)</span>，即 <span
class="math inline">\(x\)</span> 取最大值时，加法也能满足。</p>
<p>接下来是贪心策略。<br />
记 <span class="math inline">\(s_p\)</span> 表示 <span
class="math inline">\(p\)</span> 子树内 <span
class="math inline">\(b_i\)</span> 之和，<span
class="math inline">\(g_p\)</span> 表示 <span
class="math inline">\(p\)</span> 子树内最小的 <span
class="math inline">\(a_i\)</span>，<span
class="math inline">\(ls\)</span> 表示 <span
class="math inline">\(p\)</span> 的 <span
class="math inline">\(0\)</span> 子树（左子树），<span
class="math inline">\(rs\)</span> 表示 <span
class="math inline">\(p\)</span> 的 <span
class="math inline">\(1\)</span> 子树（右子树）。规定空子树 <span
class="math inline">\(s=0, g=+\infty\)</span>。</p>
<ul>
<li>当 <span class="math inline">\(t=-1\)</span>
时，所有的位都已经确定，令 <span class="math inline">\(ans \leftarrow
\max(ans,w)\)</span>。<br />
</li>
<li>当 <span class="math inline">\(p\)</span> 为空节点时，仅有加法对
<span class="math inline">\(w\)</span> 有限制，令 <span
class="math inline">\(ans \leftarrow
\max(ans,y+x+(2^{t+1}-1))\)</span>。</li>
</ul>
<p>显然上面这两种不矛盾。</p>
<p>剩下的就要确定 <span class="math inline">\(w\)</span> 和 <span
class="math inline">\(x\)</span> 的这一位。</p>
<ul>
<li>假设 <span class="math inline">\(w\)</span> 的这一位可以是 <span
class="math inline">\(1\)</span>：
<ul>
<li>若 <span class="math inline">\(x\)</span> 这一位填 <span
class="math inline">\(0\)</span>，则右子树暂时合法，而左子树需要全部加入
<span class="math inline">\(S\)</span>，故须有 <span
class="math inline">\(s_{ls} \le m \enspace \wedge \enspace
\min(y,g_{ls})+x+(2^t-1) \ge (w+2^t)\)</span>，若此，则递归右子树。</li>
<li>若 <span class="math inline">\(x\)</span> 这一位填 <span
class="math inline">\(1\)</span>，则左子树暂时合法，而右子树需要全部加入
<span class="math inline">\(S\)</span>，故须有 <span
class="math inline">\(s_{rs} \le m \enspace \wedge \enspace
\min(y,g_{rs})+(x+2^t)+(2^t-1) \ge
(w+2^t)\)</span>，若此，则递归左子树。</li>
</ul></li>
<li>若上述条件均不满足，则 <span class="math inline">\(w\)</span>
这一位只能是 <span class="math inline">\(0\)</span>：
<ul>
<li>若 <span class="math inline">\(x\)</span> 这一位填 <span
class="math inline">\(0\)</span>，须有 <span
class="math inline">\(y+x+(2^t-1) \ge
w\)</span>，则右子树不再有限制，递归左子树。</li>
<li>若 <span class="math inline">\(x\)</span> 这一位填 <span
class="math inline">\(1\)</span>，注意到一定合法，则左子树不再有限制，递归右子树，</li>
</ul></li>
</ul>
<p>发现只要每一步满足条件，则一定存在一种方案。<br />
由于 trie 上每个点至多被访问一次，故时间复杂度 <span
class="math inline">\(O(nk)\)</span>。</p>
<h3 id="code-time">Code Time！</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Int __int128</span></span><br><span class="line"><span class="type">int</span> aqx=<span class="number">1</span>,byx=<span class="number">1</span>,inf=<span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">Int Inf=(Int)inf*inf;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(Int &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">getchar</span>();x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=(x*<span class="number">10</span>+(ch-<span class="string">&#x27;0&#x27;</span>)),ch=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write</span><span class="params">(Int x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">10</span>)&#123;<span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span>+x);<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="built_in">write</span>(x/<span class="number">10</span>),<span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span>+x%<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+5</span>;</span><br><span class="line"><span class="type">int</span> n,m,k,b[N];</span><br><span class="line">Int a[N],ans;</span><br><span class="line"><span class="type">int</span> tot,s[N*<span class="number">120</span>][<span class="number">2</span>],sum[N*<span class="number">120</span>];</span><br><span class="line">Int mn[N*<span class="number">120</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> t,Int w,Int x,Int y,<span class="type">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t==<span class="number">-1</span>)&#123;ans=<span class="built_in">max</span>(ans,w);<span class="keyword">return</span>;&#125;</span><br><span class="line">    Int C=(Int)<span class="number">1</span>&lt;&lt;t;</span><br><span class="line">    <span class="keyword">if</span>(!p&amp;&amp;t&lt;k<span class="number">-1</span>)&#123;ans=<span class="built_in">max</span>(ans,y+(x|C|(C<span class="number">-1</span>)));<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="type">bool</span> f0=<span class="number">0</span>,f1=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>((w|C)-<span class="built_in">min</span>(y,mn[s[p][<span class="number">0</span>]])-x&lt;C&amp;&amp;sum[s[p][<span class="number">0</span>]]&lt;=m)f0=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(w-<span class="built_in">min</span>(y,mn[s[p][<span class="number">1</span>]])-x&lt;C&amp;&amp;sum[s[p][<span class="number">1</span>]]&lt;=m)f1=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(f0||f1)&#123;</span><br><span class="line">        <span class="keyword">if</span>(f0)<span class="built_in">dfs</span>(s[p][<span class="number">1</span>],t<span class="number">-1</span>,w|C,x,<span class="built_in">min</span>(y,mn[s[p][<span class="number">0</span>]]),m-sum[s[p][<span class="number">0</span>]]);</span><br><span class="line">        <span class="keyword">if</span>(f1)<span class="built_in">dfs</span>(s[p][<span class="number">0</span>],t<span class="number">-1</span>,w|C,x|C,<span class="built_in">min</span>(y,mn[s[p][<span class="number">1</span>]]),m-sum[s[p][<span class="number">1</span>]]);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(w-y-x&lt;C)<span class="built_in">dfs</span>(s[p][<span class="number">0</span>],t<span class="number">-1</span>,w,x,y,m);</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">true</span>)<span class="built_in">dfs</span>(s[p][<span class="number">1</span>],t<span class="number">-1</span>,w,x|C,y,m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">read</span>(a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;b[i]);</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)sum+=b[i];</span><br><span class="line">        <span class="keyword">if</span>(sum&lt;=m)&#123;</span><br><span class="line">            ans=Inf;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)ans=<span class="built_in">min</span>(ans,a[i]);</span><br><span class="line">            ans+=((Int)<span class="number">1</span>&lt;&lt;k)<span class="number">-1</span>;</span><br><span class="line">            <span class="built_in">write</span>(ans),<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    tot=<span class="number">0</span>,s[<span class="number">0</span>][<span class="number">0</span>]=s[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">0</span>,sum[<span class="number">0</span>]=<span class="number">0</span>,mn[<span class="number">0</span>]=(Int)<span class="number">1</span>&lt;&lt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> p=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=k<span class="number">-1</span>;~j;j--)&#123;</span><br><span class="line">            <span class="type">int</span> c=(a[i]&gt;&gt;j)&amp;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(!s[p][c])s[p][c]=++tot,s[tot][<span class="number">0</span>]=s[tot][<span class="number">1</span>]=<span class="number">0</span>,sum[s[p][c]]=<span class="number">0</span>,mn[s[p][c]]=(Int)<span class="number">1</span>&lt;&lt;k;</span><br><span class="line">            p=s[p][c],sum[p]+=b[i],mn[p]=<span class="built_in">min</span>(mn[p],a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>,k<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,(Int)<span class="number">1</span>&lt;&lt;k,m);</span><br><span class="line">    <span class="built_in">write</span>(ans),<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// ios::sync_with_stdio(0),cin.tie(0);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;data.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;data.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;aqx,&amp;aqx);byx&lt;=aqx;byx++)<span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>贪心</tag>
        <tag>二进制</tag>
      </tags>
  </entry>
  <entry>
    <title>后缀自动机SAM板子</title>
    <url>/2025/01/13/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BASAM%E6%9D%BF%E5%AD%90/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">int</span> aqx=<span class="number">1</span>,byx=<span class="number">1</span>,inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span><span class="number">+5</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SAM</span>&#123;<span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> tot,lst;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">nod</span>&#123;</span><br><span class="line">        <span class="type">int</span> ch[<span class="number">26</span>],fail,len;</span><br><span class="line">    &#125;t[N*<span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> sz[N*<span class="number">2</span>]; <span class="comment">// sz[u]=1表示u在主链上；求fail树子树和则为u的出现次数</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;g[N];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">extend</span><span class="params">(<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> p=lst,np=lst=++tot;</span><br><span class="line">        sz[np]=<span class="number">1</span>,t[np].len=t[p].len<span class="number">+1</span>;</span><br><span class="line">        <span class="keyword">for</span>(;p&amp;&amp;!t[p].ch[c];p=t[p].fail)t[p].ch[c]=np;</span><br><span class="line">        <span class="keyword">if</span>(!p)&#123;t[np].fail=<span class="number">1</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line">        <span class="type">int</span> q=t[p].ch[c];</span><br><span class="line">        <span class="keyword">if</span>(t[q].len==t[p].len<span class="number">+1</span>)&#123;t[np].fail=q;<span class="keyword">return</span>;&#125;</span><br><span class="line">        <span class="type">int</span> nq=++tot;</span><br><span class="line">        t[nq]=t[q],t[nq].len=t[p].len<span class="number">+1</span>,t[q].fail=t[np].fail=nq;</span><br><span class="line">        <span class="keyword">for</span>(;p&amp;&amp;t[p].ch[c]==q;p=t[p].fail)t[p].ch[c]=nq;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">        tot=lst=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> ch:s)<span class="built_in">extend</span>(ch-<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// fail边一定是len大的连向len小的</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=tot;i++)g[t[i].len].<span class="built_in">push_back</span>(i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=t[lst].len;i;i--)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j:g[i])sz[t[j].fail]+=sz[j];</span><br><span class="line">        ll ret=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=tot;i++)<span class="keyword">if</span>(sz[i]&gt;<span class="number">1</span>)ret=<span class="built_in">max</span>(ret,(ll)sz[i]*t[i].len);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;a;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string s;cin&gt;&gt;s;</span><br><span class="line">    a.<span class="built_in">build</span>(s);</span><br><span class="line">    ll ans=a.<span class="built_in">work</span>();</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// freopen(&quot;data.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;data.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="keyword">for</span>(;byx&lt;=aqx;byx++)<span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>模板</category>
      </categories>
      <tags>
        <tag>模板</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>多项式板子</title>
    <url>/2025/01/12/%E5%A4%9A%E9%A1%B9%E5%BC%8FPoly%E6%9D%BF%E5%AD%90/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">int</span> aqx=<span class="number">1</span>,byx=<span class="number">1</span>,inf=<span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">998244353</span>,G=<span class="number">3</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span><span class="number">+5</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> &amp;a,<span class="type">int</span> b)</span></span>&#123;a=(a+b)%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">mul</span><span class="params">(<span class="type">int</span> &amp;a,<span class="type">int</span> b)</span></span>&#123;a=(a*b)%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a%mod)</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)ret=ret*a%mod;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">inv</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">ksm</span>(x,mod<span class="number">-2</span>);&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Poly</span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;a;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span><span class="type">const</span></span>&#123;<span class="keyword">return</span> a.<span class="built_in">size</span>();&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;vector&lt;<span class="type">int</span>&gt;b;<span class="built_in">swap</span>(a,b);&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">expand</span><span class="params">(<span class="type">int</span> len)</span></span>&#123;<span class="keyword">if</span>(<span class="built_in">size</span>()&lt;len)a.<span class="built_in">resize</span>(len);&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">simplify</span><span class="params">(<span class="type">int</span> len)</span></span>&#123;<span class="keyword">if</span>(<span class="built_in">size</span>()&gt;len)a.<span class="built_in">resize</span>(len);&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">simplify</span><span class="params">()</span></span>&#123;<span class="keyword">while</span>(<span class="built_in">size</span>()&amp;&amp;!a.<span class="built_in">back</span>())a.<span class="built_in">pop_back</span>();&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="built_in">clear</span>(),a.<span class="built_in">resize</span>(n<span class="number">+1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">size</span>();i++)cin&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">read</span><span class="params">(Poly &amp;x,<span class="type">int</span> n)</span></span>&#123;x.<span class="built_in">read</span>(n);&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">char</span> ch1=<span class="string">&#x27; &#x27;</span>,<span class="type">const</span> <span class="type">char</span> ch2=<span class="string">&#x27;\n&#x27;</span>)</span><span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            cout&lt;&lt;a[i];</span><br><span class="line">            <span class="keyword">if</span>(i&lt;<span class="built_in">size</span>()<span class="number">-1</span>)cout&lt;&lt;ch1;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;ch2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> Poly &amp;x,<span class="type">const</span> <span class="type">char</span> ch1=<span class="string">&#x27; &#x27;</span>,<span class="type">const</span> <span class="type">char</span> ch2=<span class="string">&#x27;\n&#x27;</span>)</span></span>&#123;x.<span class="built_in">print</span>(ch1,ch2);&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">friend</span> Poly _plus(<span class="type">const</span> Poly &amp;x,<span class="type">const</span> Poly &amp;y)&#123;</span><br><span class="line">        Poly z;</span><br><span class="line">        z.<span class="built_in">expand</span>(<span class="built_in">max</span>(x.<span class="built_in">size</span>(),y.<span class="built_in">size</span>()));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;z.<span class="built_in">size</span>();i++)z.a[i]=((i&lt;x.<span class="built_in">size</span>()?x.a[i]:<span class="number">0</span>)+(i&lt;y.<span class="built_in">size</span>()?y.a[i]:<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span> z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Poly _minus(<span class="type">const</span> Poly &amp;x,<span class="type">const</span> Poly &amp;y)&#123;</span><br><span class="line">        Poly z;</span><br><span class="line">        z.<span class="built_in">expand</span>(<span class="built_in">max</span>(x.<span class="built_in">size</span>(),y.<span class="built_in">size</span>()));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;z.<span class="built_in">size</span>();i++)z.a[i]=((i&lt;x.<span class="built_in">size</span>()?x.a[i]:<span class="number">0</span>)-(i&lt;y.<span class="built_in">size</span>()?y.a[i]:<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span> z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">NTT</span><span class="params">(<span class="type">int</span> *e,<span class="type">int</span> len,<span class="type">int</span> g)</span><span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> rev[len];<span class="built_in">memset</span>(rev,<span class="number">0</span>,<span class="built_in">sizeof</span>(rev));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)rev[i]=((rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)*(len&gt;&gt;<span class="number">1</span>)));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)<span class="keyword">if</span>(i&lt;rev[i])<span class="built_in">swap</span>(e[i],e[rev[i]]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;len;i&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="type">int</span> wn=<span class="built_in">ksm</span>(g,(mod<span class="number">-1</span>)/(i&lt;&lt;<span class="number">1</span>));</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;len;j+=(i&lt;&lt;<span class="number">1</span>))</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>,wk=<span class="number">1</span>;k&lt;i;k++,wk=wk*wn%mod)&#123;</span><br><span class="line">                    <span class="type">int</span> x=e[j+k],y=wk*e[j+k+i]%mod;</span><br><span class="line">                    e[j+k]=(x+y)%mod,e[j+k+i]=(x-y)%mod;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)<span class="built_in">add</span>(e[i],mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Poly _multiply(<span class="type">const</span> Poly &amp;x,<span class="type">const</span> Poly &amp;y)&#123;</span><br><span class="line">        Poly z;</span><br><span class="line">        <span class="keyword">if</span>(!x.<span class="built_in">size</span>()||!y.<span class="built_in">size</span>())<span class="keyword">return</span> z;</span><br><span class="line">        z.<span class="built_in">expand</span>(x.<span class="built_in">size</span>()+y.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">min</span>(x.<span class="built_in">size</span>(),y.<span class="built_in">size</span>())&lt;=<span class="number">16</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;x.<span class="built_in">size</span>();i++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;y.<span class="built_in">size</span>();j++)</span><br><span class="line">                    <span class="built_in">add</span>(z.a[i+j],x.a[i]*y.a[j]);</span><br><span class="line">            <span class="keyword">return</span> z;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> len=<span class="number">1</span>;<span class="keyword">while</span>(len&lt;x.<span class="built_in">size</span>()+y.<span class="built_in">size</span>()<span class="number">-1</span>)len&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> ex[len],ey[len];<span class="built_in">memset</span>(ex,<span class="number">0</span>,<span class="built_in">sizeof</span>(ex)),<span class="built_in">memset</span>(ey,<span class="number">0</span>,<span class="built_in">sizeof</span>(ey));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;x.<span class="built_in">size</span>();i++)ex[i]=x.a[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;y.<span class="built_in">size</span>();i++)ey[i]=y.a[i];</span><br><span class="line">        z.<span class="built_in">NTT</span>(ex,len,G),z.<span class="built_in">NTT</span>(ey,len,G);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)<span class="built_in">mul</span>(ex[i],ey[i]);</span><br><span class="line">        z.<span class="built_in">NTT</span>(ex,len,<span class="built_in">inv</span>(G));</span><br><span class="line">        <span class="type">int</span> ivlen=<span class="built_in">inv</span>(len);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)<span class="built_in">mul</span>(ex[i],ivlen);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;z.<span class="built_in">size</span>();i++)z.a[i]=ex[i];</span><br><span class="line">        <span class="keyword">return</span> z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Poly _divide(<span class="type">const</span> Poly &amp;x,<span class="type">const</span> Poly &amp;y)&#123;</span><br><span class="line">        Poly z;</span><br><span class="line">        <span class="keyword">if</span>(!x.<span class="built_in">size</span>()||!y.<span class="built_in">size</span>()||x.<span class="built_in">size</span>()&lt;y.<span class="built_in">size</span>())<span class="keyword">return</span> z;</span><br><span class="line">        z.<span class="built_in">expand</span>(x.<span class="built_in">size</span>()-y.<span class="built_in">size</span>()<span class="number">+1</span>);</span><br><span class="line">        <span class="type">int</span> xx[x.<span class="built_in">size</span>()],yy[y.<span class="built_in">size</span>()];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;x.<span class="built_in">size</span>();i++)xx[i]=x.a[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;y.<span class="built_in">size</span>();i++)yy[i]=y.a[i];</span><br><span class="line">        <span class="type">int</span> iyy=<span class="built_in">inv</span>(yy[y.<span class="built_in">size</span>()<span class="number">-1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=z.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            z.a[i]=xx[i+y.<span class="built_in">size</span>()<span class="number">-1</span>]*iyy%mod;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;y.<span class="built_in">size</span>();j++)<span class="built_in">add</span>(xx[i+j],-z.a[i]*yy[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;z.<span class="built_in">size</span>();i++)<span class="built_in">add</span>(z.a[i],mod);</span><br><span class="line">        <span class="keyword">return</span> z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Poly <span class="keyword">operator</span>+(<span class="type">const</span> Poly &amp;x,<span class="type">const</span> Poly &amp;y)&#123;<span class="keyword">return</span> _plus(x,y);&#125;</span><br><span class="line">    <span class="keyword">friend</span> Poly <span class="keyword">operator</span>-(<span class="type">const</span> Poly &amp;x,<span class="type">const</span> Poly &amp;y)&#123;<span class="keyword">return</span> _minus(x,y);&#125;</span><br><span class="line">    <span class="keyword">friend</span> Poly <span class="keyword">operator</span>*(<span class="type">const</span> Poly &amp;x,<span class="type">const</span> Poly &amp;y)&#123;<span class="keyword">return</span> _multiply(x,y);&#125;</span><br><span class="line">    <span class="keyword">friend</span> Poly <span class="keyword">operator</span>/(<span class="type">const</span> Poly &amp;x,<span class="type">const</span> Poly &amp;y)&#123;<span class="keyword">return</span> _divide(x,y);&#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">val</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,t=<span class="number">1</span>;i&lt;<span class="built_in">size</span>();i++,<span class="built_in">mul</span>(t,x))<span class="built_in">add</span>(y,t*a[i]);</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">Poly x,y,z;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    x.<span class="built_in">read</span>(n),y.<span class="built_in">read</span>(m);</span><br><span class="line">    z=x*y;</span><br><span class="line">    z.<span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// freopen(&quot;data.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;data.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="keyword">for</span>(;byx&lt;=aqx;byx++)<span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>模板</category>
      </categories>
      <tags>
        <tag>模板</tag>
        <tag>多项式</tag>
      </tags>
  </entry>
  <entry>
    <title>高精度板子</title>
    <url>/2025/01/12/%E9%AB%98%E7%B2%BE%E5%BA%A6Int%E6%9D%BF%E5%AD%90/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">int</span> aqx=<span class="number">1</span>,byx=<span class="number">1</span>,inf=<span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">998244353</span>,G=<span class="number">3</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span><span class="number">+5</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> &amp;a,<span class="type">int</span> b)</span></span>&#123;a=(a+b)%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">mul</span><span class="params">(<span class="type">int</span> &amp;a,<span class="type">int</span> b)</span></span>&#123;a=(a*b)%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a%mod)</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)ret=ret*a%mod;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">inv</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">ksm</span>(x,mod<span class="number">-2</span>);&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Int</span>&#123;</span><br><span class="line">    <span class="type">bool</span> neg;vector&lt;<span class="type">int</span>&gt;a;</span><br><span class="line">    <span class="built_in">Int</span>()&#123;neg=<span class="number">0</span>;&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span><span class="type">const</span></span>&#123;<span class="keyword">return</span> a.<span class="built_in">size</span>();&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;neg=<span class="number">0</span>;vector&lt;<span class="type">int</span>&gt;b;<span class="built_in">swap</span>(a,b);&#125;</span><br><span class="line">    <span class="built_in">Int</span>(<span class="type">const</span> <span class="type">int</span> &amp;x)&#123;</span><br><span class="line">        <span class="built_in">clear</span>();</span><br><span class="line">        <span class="type">int</span> y=x;</span><br><span class="line">        <span class="keyword">if</span>(y&lt;<span class="number">0</span>)neg=<span class="number">1</span>,y=-y;</span><br><span class="line">        <span class="keyword">while</span>(y)a.<span class="built_in">push_back</span>(y%<span class="number">10</span>),y/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">expand</span><span class="params">(<span class="type">int</span> len)</span></span>&#123;<span class="keyword">if</span>(<span class="built_in">size</span>()&lt;len)a.<span class="built_in">resize</span>(len);&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">simplify</span><span class="params">()</span></span>&#123;<span class="keyword">while</span>(<span class="built_in">size</span>()&amp;&amp;!a.<span class="built_in">back</span>())a.<span class="built_in">pop_back</span>();&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">        <span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> ch:s)&#123;</span><br><span class="line">            neg^=(ch==<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isdigit</span>(ch))a.<span class="built_in">push_back</span>(ch-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">simplify</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">read</span><span class="params">(Int &amp;x)</span></span>&#123;string s;cin&gt;&gt;s;x.<span class="built_in">read</span>(s);&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">char</span> ch=<span class="number">0</span>)</span><span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">size</span>())&#123;cout&lt;&lt;<span class="string">&#x27;0&#x27;</span>&lt;&lt;ch;<span class="keyword">return</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span>(neg)cout&lt;&lt;<span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="built_in">size</span>()<span class="number">-1</span>;~i;i--)cout&lt;&lt;a[i];</span><br><span class="line">        cout&lt;&lt;ch;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> Int &amp;x,<span class="type">const</span> <span class="type">char</span> ch=<span class="number">0</span>)</span></span>&#123;x.<span class="built_in">print</span>(ch);&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> _equal(<span class="type">const</span> Int &amp;x,<span class="type">const</span> Int &amp;y)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x.<span class="built_in">size</span>()!=y.<span class="built_in">size</span>())<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;x.<span class="built_in">size</span>();i++)<span class="keyword">if</span>(x.a[i]!=y.a[i])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> _less(<span class="type">const</span> Int &amp;x,<span class="type">const</span> Int &amp;y)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x.<span class="built_in">size</span>()&lt;y.<span class="built_in">size</span>())<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(x.<span class="built_in">size</span>()&gt;y.<span class="built_in">size</span>())<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=x.<span class="built_in">size</span>()<span class="number">-1</span>;~i;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(x.a[i]&lt;y.a[i])<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(x.a[i]&gt;y.a[i])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> _greater(<span class="type">const</span> Int &amp;x,<span class="type">const</span> Int &amp;y)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x.<span class="built_in">size</span>()&lt;y.<span class="built_in">size</span>())<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(x.<span class="built_in">size</span>()&gt;y.<span class="built_in">size</span>())<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=x.<span class="built_in">size</span>()<span class="number">-1</span>;~i;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(x.a[i]&lt;y.a[i])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(x.a[i]&gt;y.a[i])<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> Int &amp;x,<span class="type">const</span> Int &amp;y)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x.neg!=y.neg)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> _equal(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> Int &amp;x,<span class="type">const</span> Int &amp;y)&#123;<span class="keyword">return</span> !(x==y);&#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="built_in">operator</span>&lt;(<span class="type">const</span> Int &amp;x,<span class="type">const</span> Int &amp;y)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x.neg&amp;&amp;!y.neg)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(!x.neg&amp;&amp;y.neg)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(!x.neg)<span class="keyword">return</span> _less(x,y);</span><br><span class="line">        <span class="keyword">if</span>(x.neg)<span class="keyword">return</span> _greater(x,y);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&gt;(<span class="type">const</span> Int &amp;x,<span class="type">const</span> Int &amp;y)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x.neg&amp;&amp;!y.neg)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(!x.neg&amp;&amp;y.neg)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(!x.neg)<span class="keyword">return</span> _greater(x,y);</span><br><span class="line">        <span class="keyword">if</span>(x.neg)<span class="keyword">return</span> _less(x,y);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">const</span> Int &amp;x,<span class="type">const</span> Int &amp;y)&#123;<span class="keyword">return</span> x&lt;y||x==y;&#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> Int &amp;x,<span class="type">const</span> Int &amp;y)&#123;<span class="keyword">return</span> x&gt;y||x==y;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> Int <span class="title">abs</span><span class="params">(<span class="type">const</span> Int &amp;x)</span></span>&#123;Int z=x;z.neg=<span class="number">0</span>;<span class="keyword">return</span> z;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">friend</span> Int _plus(<span class="type">const</span> Int &amp;x,<span class="type">const</span> Int &amp;y)&#123;</span><br><span class="line">        Int z;</span><br><span class="line">        <span class="type">int</span> w=<span class="number">0</span>;vector&lt;<span class="type">int</span>&gt;<span class="built_in">b</span>(<span class="built_in">max</span>(x.<span class="built_in">size</span>(),y.<span class="built_in">size</span>())<span class="number">+1</span>);</span><br><span class="line">        <span class="type">int</span> carry=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;w&lt;x.<span class="built_in">size</span>()||w&lt;y.<span class="built_in">size</span>()||carry;w++)&#123;</span><br><span class="line">            <span class="type">int</span> t1=(w&lt;x.<span class="built_in">size</span>()?x.a[w]:<span class="number">0</span>),t2=(w&lt;y.<span class="built_in">size</span>()?y.a[w]:<span class="number">0</span>),t3=carry;</span><br><span class="line">            b[w]=(t1+t2+t3)%<span class="number">10</span>,carry=(t1+t2+t3)/<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        z.a=b,z.<span class="built_in">simplify</span>();</span><br><span class="line">        <span class="keyword">return</span> z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Int _minus(<span class="type">const</span> Int &amp;x,<span class="type">const</span> Int &amp;y)&#123;</span><br><span class="line">        Int z;</span><br><span class="line">        <span class="type">int</span> w=<span class="number">0</span>;vector&lt;<span class="type">int</span>&gt;<span class="built_in">b</span>(<span class="built_in">max</span>(x.<span class="built_in">size</span>(),y.<span class="built_in">size</span>()));</span><br><span class="line">        <span class="type">int</span> carry=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;w&lt;x.<span class="built_in">size</span>()||w&lt;y.<span class="built_in">size</span>()||carry;w++)&#123;</span><br><span class="line">            <span class="type">int</span> t1=(w&lt;x.<span class="built_in">size</span>()?x.a[w]:<span class="number">0</span>),t2=(w&lt;y.<span class="built_in">size</span>()?y.a[w]:<span class="number">0</span>),t3=carry;</span><br><span class="line">            <span class="keyword">if</span>(t1-t2+t3&lt;<span class="number">0</span>)t3+=<span class="number">10</span>,carry=<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span> carry=<span class="number">0</span>;</span><br><span class="line">            b[w]=(t1-t2+t3)%<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        z.a=b,z.<span class="built_in">simplify</span>();</span><br><span class="line">        <span class="keyword">return</span> z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">NTT</span><span class="params">(<span class="type">int</span> *e,<span class="type">int</span> len,<span class="type">int</span> g)</span><span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> rev[len];<span class="built_in">memset</span>(rev,<span class="number">0</span>,<span class="built_in">sizeof</span>(rev));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)rev[i]=((rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)*(len&gt;&gt;<span class="number">1</span>)));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)<span class="keyword">if</span>(i&lt;rev[i])<span class="built_in">swap</span>(e[i],e[rev[i]]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;len;i&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="type">int</span> wn=<span class="built_in">ksm</span>(g,(mod<span class="number">-1</span>)/(i&lt;&lt;<span class="number">1</span>));</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;len;j+=(i&lt;&lt;<span class="number">1</span>))</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>,wk=<span class="number">1</span>;k&lt;i;k++,wk=wk*wn%mod)&#123;</span><br><span class="line">                    <span class="type">int</span> x=e[j+k],y=wk*e[j+k+i];</span><br><span class="line">                    e[j+k]=(x+y)%mod,e[j+k+i]=(x-y)%mod;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)<span class="built_in">add</span>(e[i],mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Int _multiply(<span class="type">const</span> Int &amp;x,<span class="type">const</span> Int &amp;y)&#123;</span><br><span class="line">		Int z;z.<span class="built_in">expand</span>(x.<span class="built_in">size</span>()+y.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">min</span>(x.<span class="built_in">size</span>(),y.<span class="built_in">size</span>())&lt;=<span class="number">16</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;x.<span class="built_in">size</span>();i++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;y.<span class="built_in">size</span>();j++)</span><br><span class="line">                    <span class="built_in">add</span>(z.a[i+j],x.a[i]*y.a[j]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,carry=<span class="number">0</span>;i&lt;z.<span class="built_in">size</span>()||carry;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i&gt;=z.<span class="built_in">size</span>())z.a.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">                <span class="type">int</span> bb=(z.a[i]+carry)%<span class="number">10</span>;</span><br><span class="line">                carry=(z.a[i]+carry)/<span class="number">10</span>,z.a[i]=bb;</span><br><span class="line">            &#125;</span><br><span class="line">            z.<span class="built_in">simplify</span>();</span><br><span class="line">            <span class="keyword">return</span> z;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> len=<span class="number">1</span>;<span class="keyword">while</span>(len&lt;x.<span class="built_in">size</span>()+y.<span class="built_in">size</span>()<span class="number">-1</span>)len&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">		<span class="type">int</span> ex[len],ey[len];<span class="built_in">memset</span>(ex,<span class="number">0</span>,<span class="built_in">sizeof</span>(ex)),<span class="built_in">memset</span>(ey,<span class="number">0</span>,<span class="built_in">sizeof</span>(ey));</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;x.<span class="built_in">size</span>();i++)ex[i]=x.a[i];</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;y.<span class="built_in">size</span>();i++)ey[i]=y.a[i];</span><br><span class="line">        z.<span class="built_in">NTT</span>(ex,len,G),z.<span class="built_in">NTT</span>(ey,len,G);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)<span class="built_in">mul</span>(ex[i],ey[i]);</span><br><span class="line">        z.<span class="built_in">NTT</span>(ex,len,<span class="built_in">inv</span>(G));</span><br><span class="line">        <span class="type">int</span> ivlen=<span class="built_in">inv</span>(len);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)<span class="built_in">mul</span>(ex[i],ivlen);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;z.<span class="built_in">size</span>();i++)z.a[i]=ex[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,carry=<span class="number">0</span>;i&lt;len||carry;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(i&gt;=z.<span class="built_in">size</span>())z.a.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">            <span class="type">int</span> bb=(z.a[i]+carry)%<span class="number">10</span>;</span><br><span class="line">            carry=(z.a[i]+carry)/<span class="number">10</span>,z.a[i]=bb;</span><br><span class="line">        &#125;</span><br><span class="line">        z.<span class="built_in">simplify</span>();</span><br><span class="line">        <span class="keyword">return</span> z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Int _divide(<span class="type">const</span> Int &amp;x,<span class="type">const</span> Int &amp;y)&#123;</span><br><span class="line">        Int z;</span><br><span class="line">        z.<span class="built_in">expand</span>(x.<span class="built_in">size</span>());</span><br><span class="line">        Int t;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=x.<span class="built_in">size</span>()<span class="number">-1</span>;~i;i--)&#123;</span><br><span class="line">            t.<span class="built_in">simplify</span>(),t.a.<span class="built_in">insert</span>(t.a.<span class="built_in">begin</span>(),x.a[i]);</span><br><span class="line">            <span class="keyword">while</span>(_less(y,t)||_equal(y,t))z.a[i]++,t=_minus(t,y);</span><br><span class="line">        &#125;</span><br><span class="line">        z.<span class="built_in">simplify</span>();</span><br><span class="line">        <span class="keyword">return</span> z;</span><br><span class="line">    &#125;</span><br><span class="line">    Int &amp;<span class="keyword">operator</span>=(<span class="type">const</span> <span class="type">int</span> &amp;x)&#123;<span class="built_in">return</span> (*<span class="keyword">this</span>)=(Int)x;&#125;</span><br><span class="line">    <span class="keyword">friend</span> Int <span class="keyword">operator</span>+(<span class="type">const</span> Int &amp;x,<span class="type">const</span> Int &amp;y)&#123;</span><br><span class="line">        Int z;</span><br><span class="line">        <span class="keyword">if</span>(x.neg==y.neg)z=_plus(x,y),z.neg=x.neg;</span><br><span class="line">        <span class="keyword">if</span>(!x.neg&amp;&amp;y.neg)&#123;</span><br><span class="line">            <span class="keyword">if</span>(_less(x,y))z=_minus(y,x),z.neg=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> z=_minus(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x.neg&amp;&amp;!y.neg)&#123;</span><br><span class="line">            <span class="keyword">if</span>(_less(y,x))z=_minus(x,y),z.neg=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> z=_minus(y,x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> z;</span><br><span class="line">    &#125;</span><br><span class="line">    Int &amp;<span class="keyword">operator</span>+=(<span class="type">const</span> Int &amp;x)&#123;<span class="built_in">return</span> (*<span class="keyword">this</span>)=(*<span class="keyword">this</span>)+x;&#125;</span><br><span class="line">    <span class="keyword">friend</span> Int <span class="keyword">operator</span>-(<span class="type">const</span> Int &amp;x,<span class="type">const</span> Int &amp;y)&#123;</span><br><span class="line">        Int z;</span><br><span class="line">        <span class="keyword">if</span>(x.neg!=y.neg)z=_plus(x,y),z.neg=x.neg;</span><br><span class="line">        <span class="keyword">if</span>(!x.neg&amp;&amp;!y.neg)&#123;</span><br><span class="line">            <span class="keyword">if</span>(_less(x,y))z=_minus(y,x),z.neg=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> z=_minus(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x.neg&amp;&amp;y.neg)&#123;</span><br><span class="line">            <span class="keyword">if</span>(_less(x,y))z=_minus(y,x);</span><br><span class="line">            <span class="keyword">else</span> z=_minus(x,y),z.neg=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> z;</span><br><span class="line">    &#125;</span><br><span class="line">    Int &amp;<span class="keyword">operator</span>-=(<span class="type">const</span> Int &amp;x)&#123;<span class="built_in">return</span> (*<span class="keyword">this</span>)=(*<span class="keyword">this</span>)-x;&#125;</span><br><span class="line">    <span class="keyword">friend</span> Int <span class="keyword">operator</span>*(<span class="type">const</span> Int &amp;x,<span class="type">const</span> Int &amp;y)&#123;</span><br><span class="line">        Int z;</span><br><span class="line">        z=_multiply(x,y);</span><br><span class="line">        z.neg=x.neg^y.neg;</span><br><span class="line">        <span class="keyword">return</span> z;</span><br><span class="line">    &#125;</span><br><span class="line">    Int &amp;<span class="keyword">operator</span>*=(<span class="type">const</span> Int &amp;x)&#123;<span class="built_in">return</span> (*<span class="keyword">this</span>)=(*<span class="keyword">this</span>)*x;&#125;</span><br><span class="line">    <span class="keyword">friend</span> Int <span class="keyword">operator</span>/(<span class="type">const</span> Int &amp;x,<span class="type">const</span> Int &amp;y)&#123;</span><br><span class="line">        Int z;</span><br><span class="line">        z=_divide(x,y);</span><br><span class="line">        z.neg=x.neg^y.neg;</span><br><span class="line">        <span class="keyword">return</span> z;</span><br><span class="line">    &#125;</span><br><span class="line">    Int &amp;<span class="keyword">operator</span>/=(<span class="type">const</span> Int &amp;x)&#123;<span class="built_in">return</span> (*<span class="keyword">this</span>)=(*<span class="keyword">this</span>)/x;&#125;</span><br><span class="line">    <span class="keyword">friend</span> Int <span class="keyword">operator</span>%(<span class="type">const</span> Int &amp;x,<span class="type">const</span> Int &amp;y)&#123;<span class="keyword">return</span> x-(x/y)*y;&#125;</span><br><span class="line">    Int &amp;<span class="keyword">operator</span>%=(<span class="type">const</span> Int &amp;x)&#123;<span class="built_in">return</span> (*<span class="keyword">this</span>)=(*<span class="keyword">this</span>)%x;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Int x,y;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(y);</span><br><span class="line">    <span class="built_in">print</span>(x+y,<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="built_in">print</span>(x-y,<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="built_in">print</span>(x*y,<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="built_in">print</span>(x/y,<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="built_in">print</span>(x%y,<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// freopen(&quot;data.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;data.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="keyword">for</span>(;byx&lt;=aqx;byx++)<span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>模板</category>
      </categories>
      <tags>
        <tag>模板</tag>
      </tags>
  </entry>
</search>
